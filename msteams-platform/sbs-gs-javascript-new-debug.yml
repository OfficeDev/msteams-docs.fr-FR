### YamlMime:Tutorial
title: Créer votre première application à l’aide de JavaScript
metadata:
  title: Hello World avec JavaScript
  description: Dans ce didacticiel, vous allez apprendre à créer une application Hello World avec JavaScript.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Vue d’ensemble de la mise en place
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: a458be9d5eb0a3ed29975cd94b452268da5931eb
  ms.sourcegitcommit: f9dc32566e87ffc1b2d2bd45f1388aae8f5c9083
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/17/2022
  ms.locfileid: "63558979"
items:
- durationInMinutes: 1
  content: "Démarrez Microsoft Teams développement d’applications avec votre première Teams application. Vous allez créer trois applications Teams : une application onglet, une application bot et une application d’extension de messagerie. \n\nChacune de vos applications aura une fonctionnalité, qui est livré avec ses propres interface utilisateur et expérience utilisateur :\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"Le diagramme montrant cette application comporte trois fonctionnalités.\" border=\"false\":::\n\n> [!NOTE]\n> Dans ce didacticiel, vous allez d’abord créer une application onglet, suivie d’une application bot, puis d’une application d’extension de messagerie. Toutefois, vous pouvez d’abord créer une application avec n’importe quelle fonctionnalité, sans entraver la fonctionnalité d’autres applications.\n\nDans ce didacticiel, vous allez découvrir :\n\n- Comment configurer un nouveau projet avec Teams Shared Computer Toolkit.\n- Comment créer trois applications avec une fonctionnalité différente : onglet, bot et extension de messagerie.\n- Structure de l’application :\n    - Partie onglet avec JavaScript utilisant React.\n    - Le reste des fonctionnalités avec Node.js.\n- Comment déployer votre application\n"
- title: Conditions préalables
  durationInMinutes: 1
  content: "\nVoici la liste des outils dont vous aurez besoin pour créer et déployer vos applications.\n\n| &nbsp; | Installer | Pour utiliser... |\n| --- | --- | --- |\n| **Obligatoire** | &nbsp; | &nbsp; |\n| &nbsp; | [Toolkit Teams](#install-the-teams-toolkit) | Une Microsoft Visual Studio d’extension de code qui crée une échafaudage de projet pour votre application. Utilisez la dernière version. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams collaborer avec tous les personnes avec qui vous travaillez via des applications de conversation, de réunions, d’appels, le tout au même endroit.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Environnement d’runtime JavaScript back-end. Utilisez la dernière version de LTS v14.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (recommandé) ou [Google Chrome](https://www.google.com/chrome/) | Navigateur avec outils de développement. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript ou SharePoint Framework (SPFx) build. Utilisez la version 1.55 ou ultérieure. |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Outils Azure pour Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) [et Azure CLI](/cli/azure/install-azure-cli) | Outils Azure pour accéder aux données stockées ou pour déployer un système back-end basé sur le cloud pour Teams application dans Azure. |\n| &nbsp; | [React outils de développement pour Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) [OU React Pour MicrosoftEdge&nbsp;](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | Une extension DevTools de navigateur pour la bibliothèque JavaScript open source React’open source. |\n| &nbsp; | [Afficheur Microsoft Graph](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, un outil basé sur un navigateur qui vous permet d’exécuter une requête à partir de microsoft Graph données. |\n| &nbsp; | [Documentation pour les développeurs](https://dev.teams.microsoft.com/) | Portail web pour configurer, gérer et distribuer votre application Teams y compris à votre organisation ou au Teams store. |\n\n\n> [!TIP]\n> Si vous travaillez avec des données Graph Microsoft, vous devez en savoir plus sur l’Explorateur microsoft et lui Graph signet. Cet outil basé sur un navigateur vous permet d’interroger Microsoft Graph en dehors d’une application.\n\n\n## <a name=\"prepare-development-environment\"></a>Préparer l’environnement de développement\n\nAprès avoir installé les outils requis, installez l’environnement de développement.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Installer le Teams Shared Computer Toolkit\n\nLe Teams Shared Computer Toolkit simplifie le processus de développement avec des outils pour mettre en service et déployer des ressources cloud pour votre application, publier sur le Teams store, etc. \n \nVous pouvez utiliser le kit de ressources avec Visual Studio Code, ou CLI (interface de ligne de commande), appelée `TeamsFx`.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Ouvrez Visual Studio Code et sélectionnez l’affichage **Extensions** (**Ctrl+Shift+X** / **⌘⇧-X** ou **View > Extensions**).\n1. Dans la zone de recherche, entrez **Teams Shared Computer Toolkit**.\n1. **Sélectionnez Installer** en Teams Shared Computer Toolkit.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscode.png\" alt-text=\"Illustration shows the Teams Shared Computer Toolkit extension installation.\" border=\"false\":::\n\n L Teams Shared Computer Toolkit de l’Visual Studio Code apparaît dans la barre latérale après son installation.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Illustration shows the Teams Shared Computer Toolkit icon in Visual Studio Code sidebar.\" border=\"false\":::\n\nVous pouvez également trouver les Teams Shared Computer Toolkit sur Visual Studio Code [Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nPour installer l’CLI TeamsFx, utilisez le gestionnaire `npm` de package :\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nEn fonction de votre configuration, vous devrez peut-être l’utiliser `sudo` pour installer l’CLI :\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nCette condition est plus courante sur les systèmes Linux et macOS.\n\nVeillez à ajouter le cache global npm à votre chemin d’accès. Cette étape est normalement effectuée dans le cadre du programme d’installation Node.js'installation.  \n\nVous pouvez utiliser l’CLI avec la `teamsfx` commande. Vérifiez que la commande fonctionne en cours d’exécution `teamsfx -h`.\n\n> [!CAUTION]\n> Avant de pouvoir exécuter TeamsFx dans les terminals PowerShell, vous devez activer la stratégie d’exécution « signé à distance » pour PowerShell.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Configurer votre client Teams développement\n\nUn **client** est comme un espace ou un conteneur pour votre organisation dans Teams, où vous discutez, partagez des fichiers et exécutez des réunions. Cet espace est également l’endroit où vous chargez et testez votre application. Nous allons vérifier si vous êtes prêt à développer avec le client.\n\n### <a name=\"check-for-sideloading-option\"></a>Vérifier l’option de chargement de version d’équipe\n\nAprès avoir créé l’application, vous devez charger votre application dans Teams sans la distribuer. Ce processus est appelé chargement indépendant. Connectez-vous à votre Microsoft 365 pour afficher cette option.\n\n > [!NOTE]\n > Le chargement de version test est nécessaire pour prévisualiser et tester des applications dans Teams environnement local. Si elle n’est pas activée, vous ne pourrez pas prévisualiser et tester votre application dans Teams localement.\n\nAvez-vous déjà un client et avez-vous l’accès administrateur ? Nous allons vérifier si vous le faites vraiment !\n\nVérifiez si vous pouvez télécharger une version de version de chargement de version Teams :\n\n 1. Dans le Teams client, sélectionnez **l’icône Du Store**.\n 1. **Sélectionnez Gérer vos applications**.\n 1. Sélectionnez **Publier une application**.\n 1. Recherchez l’option pour **Télécharger une application personnalisée**. Si l’option s’offre à vous, le chargement de version de version latérale des applications est activé.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"Illustration shows the option to upload a custom app in Teams.\":::\n\n     > [!NOTE]\n     > Si vous n’avez pas la possibilité de télécharger une application personnalisée, parlez-en à Teams administrateur.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Créer un client Teams développeur gratuit (facultatif)\n\nSi vous n’avez pas de compte Teams développeur, vous pouvez l’obtenir gratuitement. Rejoignez le Microsoft 365 développeur !\n\n1. Accédez au[Programme pour les développeurs Microsoft 365](https://developer.microsoft.com/microsoft-365/dev-program).\n1. **Sélectionnez Rejoindre maintenant** et suivez les instructions à l’écran.\n1. Dans l’écran d’accueil, **sélectionnez Configurer l’abonnement E5**.\n1. Configurez votre compte d’administrateur. Une fois que vous avez terminé, l’écran suivant s’affiche.\n\n    :::image type=\"content\" source=\"~/assets/images/build-your-first-app/dev-program-subscription.png\" alt-text=\"Exemple de ce que vous voyez après vous être inscrire au programme Microsoft 365 développeur.\":::\n\n1. Connectez-vous Teams à l’aide du compte d’administrateur que vous viennent de configurer. Vérifiez que vous avez la Télécharger **une option d’application** personnalisée dans Teams.\n\n## <a name=\"get-a-free-azure-account\"></a>Obtenir un compte Azure gratuit\n\nSi vous souhaitez héberger votre application ou accéder aux ressources dans Azure, vous devez avoir un abonnement Azure. [Créez un compte gratuit](https://azure.microsoft.com/free/) avant de commencer.\n\nVous avez maintenant tous les outils et vous pouvez configurer votre compte. Ensuite, nous allons configurer votre environnement de développement et commencer à créer ! Sélectionnez d’abord l’application que vous souhaitez faire.\n"
- title: Créer un espace de travail de projet pour votre application Onglet
  durationInMinutes: 1
  content: "\nDémarrez Microsoft Teams développement d’applications en créant votre première application. Cette application utilise la fonctionnalité Onglet.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-tab/your-helloworld-app-tab.png\" alt-text=\"Le diagramme montrant cette application comporte trois fonctionnalités. L’onglet est mis en surbrillant.\" border=\"false\":::\n\nDans cette page, vous allez découvrir :\n1. [Comment configurer un nouveau projet d’onglet avec Teams Shared Computer Toolkit](#create-your-tab-project-workspace)\n1. [À propos de la structure de répertoire de votre application](#take-a-tour-of-the-tab-app-source-code)\n\n## <a name=\"create-your-tab-project-workspace\"></a>Créer votre espace de travail de projet d’onglet\n\nSi les conditions préalables sont en place, commençons !\n\n> [!NOTE]\n> L Visual Studio Code’interface utilisateur affichée est à partir de Mac. Il peut varier en fonction de votre système d’exploitation, Teams Shared Computer Toolkit version et de l’environnement.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l’icône :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n1. Sélectionnez **Créer une application Teams**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Emplacement du lien Création d’un projet dans la barre latérale du Kit de ressources Teams.\" border=\"false\":::\n\n1. **Sélectionnez Créer une application Teams pour** créer une application à l’aide de Teams Shared Computer Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"L’Assistant démarre la création d’un projet\" border=\"false\":::\n\n1. **Assurez-vous que l’onglet** est sélectionné comme fonctionnalité que vous souhaitez créer dans votre application. Sélectionnez **OK**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-capabilities-tab.png\" alt-text=\"Sélectionner la fonctionnalité d’application\" border=\"false\":::\n\n1. Sélectionnez **JavaScript** comme langage de programmation.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/select-language-tab.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\" border=\"false\":::\n\n1. Entrez `helloworld` le nom de l’application. Veillez à utiliser uniquement des caractères alphanumériques. **Sélectionnez Entrée** pour continuer.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/enter-name-tab.png\" alt-text=\"Capture d’écran montrant où entrer le nom de l’application.\" border=\"false\":::\n\n    L Teams’onglet de l’application est créée en quelques secondes.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/app-created.png\" alt-text=\"Capture d’écran montrant l’application créée.\" border=\"false\":::\n\n    Une fois votre application créée, Teams Shared Computer Toolkit affiche un message pour indiquer l’emplacement de création de l’espace de travail de projet. Ce dossier est l’emplacement par défaut spécifié dans Visual Studio Code paramètres.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"Message d’emplacement\":::\n\n    Le message offre deux options :\n    \n    - **Modifier l’emplacement**\n    - **Débogage local**\n    \n    Pour ce didacticiel, vous n’avez pas besoin d’utiliser ces options.\n\n    > [!NOTE]\n    > Si vous choisissez de modifier l’emplacement de l’espace de travail, il est reflété uniquement pour les projets que vous créez après le rechargement Visual Studio Code. Aucune modification n’est faite sur l’emplacement des projets existants.\n\n    <details>\n    <summary>Récapitulatif rapide de la création d’Teams application.</summary>\n    Regardez ce résumé court pour créer une application Teams’application.\n\n    ![Créer une application Teams de messagerie](~/assets/videos/javascript-tab-app.gif) </details>\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nUtilisez le CLI `teamsfx` pou créer votre premier projet. Commencez à partir du dossier dans lequel vous souhaitez créer le dossier du projet.\n\n``` bash\nteamsfx new\n```\n\nVous pouvez utiliser l’CLI pour créer une application Teams web. L’CLI vous guide tout au long d’une série de questions. Chaque question inclut une instruction pour y répondre.\n\nPar exemple, utilisez des touches de direction pour sélectionner une option. Après avoir fait votre choix, sélectionnez **Entrée** pour le confirmer.\n\n1. Sélectionnez **Créer une application Teams**.\n1. Sélectionnez la **fonctionnalité Onglet** .\n1. Sélectionnez l'hébergement frontal **Azure**.\n1. Ne sélectionnez aucune ressource cloud.\n1. Sélectionnez **JavaScript** comme langage de programmation.\n1. Appuyez sur **Entrée** pour sélectionner le dossier de l’espace de travail par défaut.\n1. Entrez `helloworld` le nom de votre application. Le nom de l’application doit uniquement avoir des caractères alphanumériques.\n\n  Une fois que vous avez répondu à toutes les questions, votre projet est créé.\n\n---\n\n## <a name=\"take-a-tour-of-the-tab-app-source-code\"></a>Faire une visite guidée du code source de l’application onglet\n\nTeams Shared Computer Toolkit fournit tous les composants pour la création d’une application. Après avoir créé le projet, vous pouvez afficher les dossiers et les fichiers du projet dans la zone **Explorateur** de Visual Studio Code.\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/hw-folder-structure-tab.png\" alt-text=\"Project fichiers échafaudés pour l’application avec la fonctionnalité Tab dans Visual Studio Code.\":::\n\nBien que vous êtes libre de choisir n’importe quelle infrastructure d’interface utilisateur (ou de ne pas utiliser d’infrastructure), cet exemple de code de modèle fournit une structure avec React composants.\n\nEntre autres éléments de cette structure de répertoires, le Shared Computer Toolkit conserve :\n\n| Nom du dossier | Sommaire |\n| --- | --- |\n| `.fx/configs` | Fichiers de configuration que l’utilisateur peut personnaliser pour Teams application. |\n| • `.fx/configs/config.<envName>.json` | Fichier de configuration pour chaque environnement. |\n| • `.fx/configs/azure.parameters.<envName>.json` | Fichier de paramètres pour la mise en service d’Azure BICEP pour chaque environnement. |\n| • `.fx/configs/projectSettings.json` | Paramètres de projet globaux qui s’appliquent à tous les environnements. |\n| • `.fx/configs/localSettings.json` | Fichier de configuration pour le débogage local. |\n| • `.fx/states` | Mise en service de la sortie générée par Teams Shared Computer Toolkit.  Le kit de ressources crée ce dossier après avoir provisioné des ressources pour votre application. |\n| • `.fx/states/state.<envName>.json` | Approvisionnement du fichier de sortie pour chaque environnement. |\n| • `.fx/states/<env>.userdata` | Données utilisateur sensibles pour la sortie de mise en service pour chaque environnement. |\n| `tabs` | Code de la fonctionnalité Onglet nécessaire lors de l’utilisation, tel que la notification de confidentialité, les conditions d’utilisation et les onglets de configuration. |\n| • `tabs/src/index.jsx` | Point d’entrée de l’application frontale, où le composant d’application principal est restituer avec `ReactDOM.render()` |\n| • `tabs/src/components/App.jsx` | Code de gestion du routage d’URL dans l’application. Il appelle le [Kit de développement logiciel (SDK) client JavaScript Microsoft Teams](../msteams-platform/tabs/how-to/using-teams-client-sdk.md) pour établir une communication entre votre application et Teams. |\n| • `tabs/src/components/Tab.jsx` | Code pour implémenter l’interface utilisateur de votre application. |\n| • `tabs/src/components/TabConfig.jsx` | Code pour implémenter l’interface utilisateur qui configure votre application. |\n| `templates/appPackage` | Fichiers de modèles de manifeste d’application et icônes d’application : color.png et outline.png. |\n| • `templates/appPackage/manifest.local.template.json` | Manifeste de l’application pour l’exécution de l’application dans un environnement local.  |\n| • `templates/appPackage/manifest.remote.template.json` | Manifeste de l’application pour l’exécution de l’application dans un environnement distant, tel qu’un site Azure.|\n|  `templates/azure` | Fichiers de modèles BICEP. |\n\nLorsque vous ajoutez la fonctionnalité cloud, Teams Shared Computer Toolkit ajoute les dossiers nécessaires au projet. Le `api` dossier contient le code des fonctions Azure que vous écrivez.\n"
- title: Créer et exécuter votre première application d’onglet
  durationInMinutes: 1
  content: "\nAprès avoir installé votre espace de travail de projet avec Teams Shared Computer Toolkit, créez votre projet d’onglet. Vous devez vous inscrire à votre compte Microsoft 365 client.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Connectez-vous à votre compte Microsoft 365 client\n\nUtilisez votre Microsoft 365 pour vous Teams. Si vous utilisez un client de programme Microsoft 365 développeur, le compte d’administrateur que vous avez créé lors de l’inscription est votre Microsoft 365 client.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l Teams Shared Computer Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: icône dans la barre latérale.\n1. **Sélectionnez Se connectez à M365**.\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte.\n\n1. Connectez-vous à votre compte Microsoft 365 à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y invitez et revenir à Visual Studio Code.\n1. Revenir à Teams Shared Computer Toolkit dans Visual Studio Code.\n\n    La section **ACCOUNTS** de la barre latérale affiche le nom Microsoft 365 compte. Teams Shared Computer Toolkit affiche le **chargement de version sideload activé** si le chargement de version secondaire est activé pour votre compte Microsoft 365 client.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Screenshot showing where to sign in to Microsoft 365 and Azure.\" border=\"false\":::\n\n    Vous êtes maintenant prêt à créer l’application et à l’exécuter dans l’environnement local !\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous Microsoft 365 l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’CLI TeamsFx.\n\n    Maintenant que l’environnement de développement est configuré, vous pouvez créer, générer et déployer votre première application Teams de développement.\n\n---\n\n## <a name=\"build-and-run-your-app-locally-in-visual-studio-code\"></a>Générez et exécutez votre application localement dans Visual Studio Code\n\nPour créer et exécuter votre application localement :\n\n1. Dans Visual Studio Code, sélectionnez **F5** pour exécuter l’application en mode débogage.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Découvrez ce qui se produit lorsque vous exécutez votre application localement dans le débogueur.</summary>\n\n   Lorsque vous appuyez sur **la touche F5**, Teams Shared Computer Toolkit :\n\n   1. Vérifie toutes les conditions préalables suivantes :\n      * Prise en charge Node.js version est installée.\n      * Microsoft 365 compte est connecté et le chargement de version de version est activé. \n      * Le certificat de développement pour localhost est installé.           \n      * Les packages NPM pour l’application Onglet sont installés.\n      * Le port requis par l’application Onglet est disponible.\n\n      > [!NOTE]\n      > Si Teams Shared Computer Toolkit ne parvient pas à vérifier l’un des prérequis, il vous invite à effectuer la même chose.\n\n   2. Inscrit une application Azure AD et configure l’application.\n   3. Inscrit une application Teams dans Teams portail du développeur et configure l’application.\n   4. Démarre l’application Onglet.\n   5. Démarre Teams dans un navigateur web avec une commande pour indiquer Teams charger une version Teams application.\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/f5run.png\" alt-text=\"Capture d’écran montrant l’pression sur la touche F5.\":::\n\n    > [!NOTE]\n    > Lorsque vous exécutez l’application pour la première fois, toutes les dépendances sont téléchargées et l’application est conçue. Une fenêtre de navigateur s’ouvre lorsque la build est terminée. Ce processus peut prendre entre 3 et 5 minutes.\n\n    Le kit de ressources vous invite à installer un certificat local, si nécessaire. Ce certificat permet à Teams de charger votre application à partir de `https://localhost`.\n\n1. **Sélectionnez Oui** si la boîte de dialogue suivante s’affiche :\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/certificate-new.png\" alt-text=\"Screenshot showing the prompt to install an SSL certificate to enable Teams to load your application from localhost.\":::\n\n    Ou **sélectionnez Continuer**, en fonction de votre système d’exploitation :\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/ssl-prompt-mac.png\" alt-text=\"Screenshot showing the prompt to install an SSL certificate to enable Teams to load your application from localhost on Mac.\":::\n\n    Teams client web s’ouvre dans une fenêtre de navigateur.\n\n1. Connectez-vous avec votre Microsoft 365, si vous y êtes invité.\n\n1. **Sélectionnez Ajouter** lorsque vous y invitez le chargement de version Teams sur votre ordinateur local.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/add-tab-app-local-debug.png\" alt-text=\"Ajouter l’application à Teams\":::\n\n1. Félicitations, votre première application s’exécute sur Teams !\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-debug.png\" alt-text=\"Capture d’écran de l’application terminée\":::\n\n1. Déplacez-vous dans la page pour afficher les détails de l’utilisateur.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-local-authorize.png\" alt-text=\"Capture d’écran de la section Informations utilisateur sous l’onglet\":::\n    \n1. **Sélectionnez Autoriser pour** autoriser votre application à récupérer les détails de l’utilisateur à l’aide de Microsoft Graph.\n\n    L’application demande l’autorisation d’accorder l’accès pour afficher les détails de l’utilisateur.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-graph-permission.png\" alt-text=\"Capture d’écran de l’autorisation de l’application pour accéder aux détails de l’utilisateur\":::\n\n1. **Sélectionnez Accepter** pour que votre application accède aux détails de l’utilisateur.\n\n    Votre photographie et vos détails apparaissent dans vos onglets personnels.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/tab-app-user-info.png\" alt-text=\"Capture d’écran des informations utilisateur sous l’onglet\":::\n\n    Vous pouvez faire des activités de débogage normales, telles que la définition de points d’arrêt, comme s’il s’ait d’une autre application web. L’application prend en charge le rechargement à chaud. Si vous modifiez un fichier dans le projet, la page est rechargée.\n\n  <!-- markdownlint-disable MD033 -->\n\n  <details>\n  <summary>Découvrez comment résoudre les problèmes si votre application ne s’exécute pas localement.</summary>\n\n  Pour exécuter correctement votre application dans Teams, assurez-vous que vous avez activé le chargement de version secondaire dans Teams compte. Pour en savoir plus sur le chargement d’une version de version de base, voir la section Conditions préalables.\n\n  </details>\n\n  Vous savez comment utiliser Shared Computer Toolkit pour configurer une application onglet et l’exécuter localement. Ensuite, nous allons apprendre à créer un bot de conversation avec Shared Computer Toolkit !\n"
- title: Créer un espace de travail de projet pour votre application bot
  durationInMinutes: 1
  content: "\nVous avez créé votre application onglet. Maintenant, nous allons créer votre première application de bot.\n\nLa fonctionnalité de bot d’une Teams crée un chatbot ou un bot de conversation. Vous l’utilisez pour exécuter des tâches simples et automatisées, telles que la fourniture d’un service clientèle. Un bot discute avec un service web et vous aide à utiliser ses offres. Vous pouvez obtenir des prévisions météorologiques, effectuer des réservations ou tout autre service proposé à l’aide d’un bot de conversation.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"Le diagramme montrant cette application comporte trois fonctionnalités. Le bot est mis en surbrillant.\" border=\"false\":::\n\nComme vous avez déjà préparé la création de ces applications, vous pouvez configurer un nouveau projet Teams pour la création de l’application bot.\n\nDans ce didacticiel, vous allez découvrir :\n\n1. [Comment configurer un nouveau projet bot avec Teams Shared Computer Toolkit.](#create-your-bot-project-workspace)\n1. [À propos de la structure de répertoire de votre projet d’application.](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> Actuellement, les bots sont disponibles dans Cloud de la communauté du secteur public (Cloud de la communauté du secteur public), mais pas dans les GCC-High et le département de la Défense (DOD).\n\n## <a name=\"create-your-bot-project-workspace\"></a>Créer votre espace de travail de projet de bot\n\nSi les conditions préalables sont en place, commençons !\n\n> [!NOTE]\n> L Visual Studio Code’interface utilisateur affichée est à partir de Mac. Il peut varier en fonction de votre système d’exploitation, Teams Shared Computer Toolkit version et de l’environnement.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l’icône :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n1. Sélectionnez **Créer une application Teams**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Emplacement du lien Création d’un projet dans la barre latérale du Kit de ressources Teams.\" border=\"false\":::\n\n1. **Sélectionnez Créer une application Teams pour** créer une application à l’aide du Teams Shared Computer Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"Démarrage de l’Assistant pour la Création d’un projet\" border=\"false\":::\n\n1. **Sélectionnez Bot**, **désélectionner l’onglet**, puis **OK**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"Capture d’écran présentant comment ajouter des fonctionnalités à votre nouvelle application.\" border=\"false\":::\n\n1. **Sélectionnez JavaScript** dans la section **Langage de** programmation.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\" border=\"false\":::\n\n1. Entrez un nom approprié pour votre application, tel que `hellobot`. Assurez-vous que le nom de votre application est alphanumérique. **Sélectionnez Entrée** pour continuer.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"Capture d’écran montrant où entrer le nom de l’application.\" border=\"false\":::\n\n    Votre Teams application avec une fonctionnalité Bot est créée en quelques secondes.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"Capture d’écran montrant l’application créée.\" border=\"false\":::\n\n    Une fois votre application créée, le Teams Shared Computer Toolkit affiche un message pour indiquer l’emplacement de création de l’espace de travail de projet. Ce dossier est l’emplacement par défaut spécifié dans Visual Studio Code paramètres.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"Message d’emplacement\":::\n\n    Le message offre deux options :\n    \n    - **Modifier l’emplacement**\n    - **Débogage local**\n    \n    Pour ce didacticiel, vous n’avez pas besoin d’utiliser ces options.\n\n    > [!NOTE]\n    > Si vous choisissez de modifier l’emplacement de l’espace de travail, il est reflété uniquement pour les projets que vous créez après le rechargement Visual Studio Code. Aucune modification n’est faite sur l’emplacement des projets existants.\n\n<details>\n<summary>Récapitulatif rapide de la création d’Teams application.</summary>\nRegardez ce résumé court pour créer une application Teams’application.\n\n![Créer une application Teams de messagerie](~/assets/videos/javascript-bot-app.gif)\n</details>\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nUtilisez le CLI `teamsfx` pou créer votre premier projet.  Commencez à partir du dossier dans lequel vous souhaitez créer le dossier du projet.\n\n``` bash\nteamsfx new\n```\n\nVous pouvez utiliser l’CLI pour créer une application Teams web. L’CLI vous guide tout au long d’une série de questions. Chaque question inclut une instruction pour y répondre.\n\nPar exemple, utilisez des touches de direction pour sélectionner une option. Après avoir fait votre choix, sélectionnez **Entrée** pour le confirmer.\n\n1. Sélectionnez **Créer une application Teams**.\n1. **Sélectionnez Bot** et désélection **de l’onglet**.\n1. Sélectionnez **JavaScript** comme langage de programmation.\n1. **Sélectionnez Entrée** pour sélectionner le dossier d’espace de travail par défaut.\n1. Entrez un nom approprié pour votre application, tel que `HelloBot`.  Le nom de l’application doit contenir des caractères alphanumériques uniquement.\n\nUne fois que vous avez répondu à toutes les questions, votre projet est créé.\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>Faire une visite guidée du code source de l’application bot\n\nUne fois la création de la échafaudage effectuée, affichez les répertoires et les fichiers du projet dans la zone Explorateur de Visual Studio Code.\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hw-folder-structure-bot.png\" alt-text=\"Project fichiers échafaudés pour le bot dans Visual Studio Code.\" border=\"false\":::\n\n| Nom du dossier | Sommaire |\n| --- | --- |\n| `.fx/configs` | Fichiers de configuration que l’utilisateur peut personnaliser pour Teams application. |\n| `.fx/configs/config.<envName>.json` | Fichier de configuration pour chaque environnement. |\n| `.fx/configs/azure.parameters.<envName>.json` | Fichier de paramètres pour la mise en service d’Azure BICEP pour chaque environnement. |\n| `.fx/configs/projectSettings.json` | Paramètres de projet globaux qui s’appliquent à tous les environnements. |\n| `.fx/configs/localSettings.json` | Fichier de configuration pour le débogage local. |\n| `.fx/states` | Mise en service de la sortie générée par le Shared Computer Toolkit.  Le kit de ressources crée ce dossier après avoir provisioné des ressources pour votre application. |\n| `.fx/states/state.<envName>.json` | Approvisionnement du fichier de sortie pour chaque environnement. |\n| `.fx/states/<env>.userdata` | Données utilisateur sensibles pour la sortie de mise en service pour chaque environnement. |\n| `bot` |  Code de la fonctionnalité Bot nécessaire lors de l’runtime. |\n| `bot/teamsBot.js` | Point d’entrée principal de l’application bot. |\n| `templates/appPackage` | Fichiers de modèles de manifeste d’application et icônes d’application, color.png et outline.png. |\n| `templates/appPackage/manifest.local.template.json` | Manifeste de l’application pour l’exécution de l’application dans l’environnement local  |\n| `templates/appPackage/manifest.remote.template.json` | Manifeste de l’application pour l’exécution de l’application dans un environnement distant, tel qu’un site Azure |\n| `templates/azure` | Fichiers de modèles BICEP |\n\n> [!Tip]\n> Familiarisez-vous avec les bots en dehors de Teams avant d’intégrer votre premier bot dans Teams.\n"
- title: Créer et exécuter votre première application de bot
  durationInMinutes: 1
  content: "\nAprès avoir installé votre espace de travail de projet avec Teams Shared Computer Toolkit, créez votre projet de bot. Assurez-vous que vous vous êtes Microsoft 365 votre compte.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Connectez-vous à votre compte Microsoft 365 client\n\nUtilisez ce compte pour vous Teams. Si vous utilisez un client de programme Microsoft 365 développeur, le compte d’administrateur que vous avez créé lors de l’inscription est votre Microsoft 365 client.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l Teams Shared Computer Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: icône dans la barre latérale.  \n1. **Sélectionnez Se connectez à M365**.\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte.\n\n1. Connectez-vous à votre compte Microsoft 365 à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y invitez et revenir à Visual Studio Code.\n1. Revenir à Teams Shared Computer Toolkit dans Visual Studio Code.\n\n    Utilisez ce compte pour vous Teams. Si vous utilisez un client de programme Microsoft 365 développeur, le compte d’administrateur que vous avez créé lors de l’inscription est votre Microsoft 365 client.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Screenshot showing where to sign in to Microsoft 365 and Azure.\" border=\"false\":::\n\n    Vous êtes maintenant prêt à créer l’application et à l’exécuter localement !\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous Microsoft 365 l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’CLI TeamsFx.\n\n    Maintenant que l’environnement de développement est configuré, vous pouvez créer, générer et déployer votre première application Teams de développement.\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>Créer et exécuter votre première application de bot localement\n\nPour créer et exécuter votre application dans l’environnement local :\n\n1. **Sélectionnez F5** dans Visual Studio Code pour exécuter votre application en mode débogage.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Découvrez ce qui se produit lorsque vous exécutez votre application localement dans le débogueur.</summary>\n\n    Lorsque vous appuyez sur **la touche F5**, Teams Shared Computer Toolkit :\n\n   1. Vérifie toutes les conditions préalables suivantes :\n      * Prise en charge Node.js version est installée.\n      * Microsoft 365 compte est connecté et le chargement de version de version est activé. \n      * Ngrok est installé.           \n      * Les packages NPM pour l’application bot sont installés.\n      * Le port requis par l’application bot est disponible.\n\n      > [!NOTE]\n      > Si Teams Shared Computer Toolkit ne parvient pas à vérifier l’un des prérequis, il vous invite à effectuer la même chose.\n\n   2. Démarre Ngrok pour créer un tunnel HTTP.\n   3. Inscrit une application Azure AD et configure l’application.\n   4. Inscrit un bot dans Bot Framework et le configure.\n   5. Inscrit une application Teams dans Teams portail du développeur et configure l’application.\n   6. Démarre l’application bot.\n   7. Démarre Teams dans un navigateur web avec une commande pour indiquer Teams charger une version Teams application.\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"Screenshot showing when F5 key is pressed for debugging.\":::\n    \n    >[!NOTE]\n    > Lorsque vous exécutez l’application pour la première fois, toutes les dépendances sont téléchargées et l’application est conçue. Une fenêtre de navigateur s’ouvre automatiquement lors la build est terminée. Ce processus peut prendre entre 3 et 5 minutes.\n\n    Votre navigateur web commence à exécuter l’application.\n\n1. Connectez-vous avec votre Microsoft 365, si vous y êtes invité.\n\n1. **Sélectionnez Ajouter** lorsque vous y invitez le chargement de version Teams sur votre ordinateur local.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Capture d’écran montrant que le bot est ajouté sur Teams client.\":::\n\n    À présent, le bot s’exécute Teams ! Une fois l’application chargée, une session de conversation avec le bot s’ouvre.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Capture d’écran montrant que le bot est en cours d’exécution Teams client.\":::\n\n    Vous pouvez taper pour `welcome` afficher une carte d’introduction et taper `learn` pour aller à la documentation de commande de carte adaptative et de bot.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Capture d’écran montrant la carte d’apprentissage dans le bot sur Teams client.\":::       \n\n    Vous pouvez faire des activités de débogage normales, telles que la définition de points d’arrêt, comme avec n’importe quelle autre application web. Ouvrez le fichier `bot/teamsBot.js`, puis localisez la méthode `onMessage()`. Définissez un point d’arrêt dans n’importe quel cas. Tapez ensuite du texte.\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Découvrez comment résoudre les problèmes si votre application ne s’exécute pas localement.</summary>\n\n  Pour exécuter correctement votre application dans Teams, assurez-vous que vous avez activé le chargement de version secondaire dans Teams compte. Pour en savoir plus sur le chargement d’une version de version de base, voir la section Conditions préalables.\n\n  > [!IMPORTANT]\n  > Actuellement, les applications de chargement de version de version Cloud de la communauté du secteur public (Cloud de la communauté du secteur public), Cloud de la communauté du secteur public-High et DOD.\n\n  > [!TIP]\n  > Vérifiez les problèmes avant de recharger une version indépendante de votre application à l’aide de l’outil [de validation de l’application](https://dev.teams.microsoft.com/appvalidation.html). Cet outil est inclus dans le kit de ressources. Corrigez les erreurs de chargement de version de version de l’application.\n  </details> \n"
- title: Créer un espace de travail de projet pour votre application d’extension de messagerie
  durationInMinutes: 1
  content: "\nVous avez créé votre application de bot. Maintenant, nous allons créer votre première application d’extension de messagerie.\n\nLa fonctionnalité Extension de messagerie vous permet d’interagir avec un service web. Utilisez la zone de composition, la zone de commande ou une messagerie dans Teams client pour rechercher et lancer des actions dans un système externe.\n\n  :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-msgext/your-helloworld-app-msgext.png\" alt-text=\"Le diagramme montrant cette application comporte trois fonctionnalités. l’extension de messagerie est mise en surbrillrillation.\" border=\"false\":::\n\nIl existe deux types **d’extension de messagerie** Teams :\n\n- [Commandes de recherche](../msteams-platform/messaging-extensions/how-to/search-commands/define-search-command.md) : vous pouvez effectuer des recherches dans des systèmes externes. Ensuite, vous pouvez insérer ses résultats dans un message sous la forme d’une carte.\n- [Commandes d’action](../msteams-platform/messaging-extensions/how-to/action-commands/define-action-command.md) : vous pouvez présenter à vos utilisateurs une fenêtre popup modale pour collecter ou afficher des informations. Ensuite, vous pouvez traiter leur interaction et renvoyer des informations à Teams.\n\nNous allons créer une application d’extension de messagerie avec une *commande de recherche*. Utilisez-le pour rechercher des données externes et insérer les résultats dans un message Teams client.\n\nComme vous avez déjà préparé la création de ces applications, vous pouvez configurer un nouveau projet Teams pour la création de l’application d’extension de messagerie.\n\n> [!NOTE]\n> Les extensions de messagerie ont recours à des bots pour fournir un dialogue entre l’utilisateur et votre code.\n\n\nDans ce didacticiel, vous allez découvrir :\n\n1. [Comment configurer un nouveau projet d’extension de messagerie avec Teams Shared Computer Toolkit.](#create-your-messaging-extension-project-workspace)\n1. [À propos de la structure de répertoire de votre projet d’application.](#take-a-tour-of-the-messaging-extension-app-source-code)\n\n## <a name=\"create-your-messaging-extension-project-workspace\"></a>Créer votre espace de travail de projet d’extension de messagerie\n\nSi les conditions préalables sont en place, commençons !\n\n> [!NOTE]\n> L Visual Studio Code’interface utilisateur affichée est à partir de Mac. Il peut varier en fonction de votre système d’exploitation, Shared Computer Toolkit version et de l’environnement.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vsc)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l’icône :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n1. **Sélectionnez Créer un Project** à partir du côté gauche du Shared Computer Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Emplacement du lien Création d’un projet dans la barre latérale du Kit de ressources Teams.\" border=\"false\":::\n\n1. **Sélectionnez Créer une Project** créer une application à l’aide de la Teams Shared Computer Toolkit.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"Démarrage de l’Assistant pour la Création d’un projet\" border=\"false\":::\n\n1. **Sélectionnez Extension de messagerie**, Désélection **de l’onglet** et **OK**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-capabilities-mex.png\" alt-text=\"Capture d’écran présentant comment ajouter des fonctionnalités à votre nouvelle application.\" border=\"false\":::\n\n1. Sélectionnez **JavaScript** comme langage de programmation.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/select-language-mex.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\" border=\"false\":::\n\n1. Entrez un nom approprié pour votre application. Assurez-vous que le nom de l’application est alphanumérique. **Sélectionnez Entrée** pour continuer.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/enter-name-mex.png\" alt-text=\"Capture d’écran montrant comment entrer le nom de l’application.\" border=\"false\":::\n\n    Teams Shared Computer Toolkit crée l’application en quelques secondes.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-created-mex.png\" alt-text=\"Capture d’écran montrant l’application créée.\" border=\"false\":::\n\n    Une fois votre application créée, le Teams Shared Computer Toolkit affiche un message pour indiquer l’emplacement de création de l’espace de travail de projet. Il s’agit de l’emplacement par défaut spécifié dans Visual Studio Code paramètres.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/location-change.png\" alt-text=\"Message d’emplacement\":::\n\n    Le message offre deux options :\n    \n    - **Modifier l’emplacement**\n    - **Débogage local**\n    \n    Pour ce didacticiel, vous n’avez pas besoin d’utiliser ces options.\n\n    > [!NOTE]\n    > Si vous choisissez de modifier l’emplacement de l’espace de travail, il est reflété uniquement pour les projets que vous créez après le rechargement Visual Studio Code. Aucune modification n’est faite sur l’emplacement des projets existants.\n\n  <details>\n  <summary>Récapitulatif rapide de la création d’Teams application.</summary>\n  Regardez ce résumé court pour créer une application Teams’application.\n\n  ![Créer une application Teams de messagerie](~/assets/videos/javascript-msg-ext-app.gif)\n  </details>\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nUtilisez le CLI `teamsfx` pou créer votre premier projet. Commencez à partir du dossier dans lequel vous souhaitez créer le dossier du projet.\n\n``` bash\nteamsfx new\n```\n\nVous pouvez utiliser l’CLI pour créer une application Teams web. L’CLI vous guide tout au long d’une série de questions. Chaque question inclut une instruction pour y répondre.\n\nPar exemple, utilisez les touches de direction pour sélectionner une option. Après avoir fait votre choix, sélectionnez **Entrée** pour le confirmer.\n\n\n1. Sélectionnez **Créer une application Teams**.\n1. Sélectionnez **Extension de message** et désélection **de l’onglet**.\n1. Sélectionnez **JavaScript** comme langage de programmation.\n1. **Sélectionnez Entrée** pour sélectionner le dossier d’espace de travail par défaut.\n1. Entrez un nom approprié pour votre application, tel que `HelloMsgExtn`.  Le nom de l’application doit contenir des caractères alphanumériques uniquement.\n\n  Une fois toutes les questions auxquelles vous avez répondu, votre projet est créé.\n\n---\n\n## <a name=\"take-a-tour-of-the-messaging-extension-app-source-code\"></a>Faire une visite guidée du code source de l’application d’extension de messagerie\n\nUne extension de messagerie utilise Bot Framework. Vous l’utilisez pour interagir avec votre service via une conversation. Une fois la création de la échafaudage effectuée, affichez les répertoires et les fichiers du projet dans la zone Explorateur de Visual Studio Code.\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/hw-folder-structure-mex.png\" alt-text=\"Disposition de fichier d’un projet de bot\" border=\"false\":::\n\n| Nom du dossier | Sommaire |\n| --- | --- |\n| `.fx/configs` | Fichiers de configuration que l’utilisateur peut personnaliser pour Teams application. |\n| `.fx/configs/config.<envName>.json` | Fichier de configuration pour chaque environnement. |\n| `.fx/configs/azure.parameters.<envName>.json` | Fichier de paramètres pour la mise en service d’Azure BICEP pour chaque environnement. |\n| `.fx/configs/projectSettings.json` | Paramètres de projet globaux qui s’appliquent à tous les environnements. |\n| `.fx/configs/localSettings.json` | Fichier de configuration pour le débogage local. |\n| `.fx/states` | Mise en service de la sortie générée par le Shared Computer Toolkit.  Le kit de ressources crée ce dossier après avoir provisioné des ressources pour votre application. |\n| `.fx/states/state.<envName>.json` | Approvisionnement du fichier de sortie pour chaque environnement. |\n| `.fx/states/<env>.userdata` | Données utilisateur sensibles pour la sortie de mise en service pour chaque environnement. |\n| `bot` |  Code du bot nécessaire lors de l’runtime. |\n| `bot/messageExtensionBot.js` | Point d’entrée principal de l’application d’extension de messagerie. |\n| `templates/appPackage` | Fichiers de modèles de manifeste d’application et icônes d’application, color.png et outline.png. |\n| `templates/appPackage/manifest.local.template.json` | Manifeste de l’application pour l’exécution de l’application dans l’environnement local  |\n| `templates/appPackage/manifest.remote.template.json` | Manifeste de l’application pour l’exécution de l’application dans un environnement distant, tel qu’un site Azure |\n| `templates/azure` | Fichiers de modèles BICEP |\n\n> [!Tip]\n> Familiarisez-vous avec les bots et l’extension de messagerie en dehors Teams avant d’intégrer votre application dans Teams.\n"
- title: Créer et exécuter votre première application d’extension de messagerie
  durationInMinutes: 1
  content: "\nAprès avoir installé votre espace de travail de projet avec Teams Shared Computer Toolkit, créez votre projet. Vous devez vous inscrire à votre compte Microsoft 365 client.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Connectez-vous à votre compte Microsoft 365 client\n\nUtilisez ce compte pour vous Teams. Si vous utilisez un client de programme Microsoft 365 développeur, le compte d’administrateur que vous avez créé lors de l’inscription est votre Microsoft 365 client.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vcode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l Teams Shared Computer Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: icône dans la barre latérale.  \n1. **Sélectionnez Se connectez à M365**.\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte.\n\n1. Connectez-vous à votre Microsoft 365 client.\n1. Fermez le navigateur lorsque vous y invitez et revenir à Visual Studio Code.\n1. Revenir à Teams Shared Computer Toolkit dans Visual Studio Code.\n\n    La section **ACCOUNTS** de la barre latérale affiche le nom Microsoft 365 compte. Le Teams Shared Computer Toolkit affiche le **chargement de version sideload activé** si le chargement de version sideload est activé pour votre compte Microsoft 365 client.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Screenshot showing where to sign in to Microsoft 365 and Azure.\" border=\"false\":::\n\n    Vous êtes maintenant prêt à créer l’application et à l’exécuter localement !\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous Microsoft 365 l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’CLI TeamsFx.\n\n    Maintenant que l’environnement de développement est configuré, vous pouvez créer, générer et déployer votre première application Teams de développement.\n\n---\n\n## <a name=\"build-and-run-your-app-in-the-local-environment\"></a>Créer et exécuter votre application dans l’environnement local\n\nUne extension de messagerie vous permet d’interagir avec un service web. Il tire parti de la fonctionnalité de messagerie et de la communication sécurisée d’un bot. L’application d’extension de messagerie est ajoutée à un service web enregistré en tant que bot. \n\n### <a name=\"build-and-run-your-app-locally\"></a>Créer et exécuter votre application localement\n\n1. **Sélectionnez F5** dans Visual Studio Code pour exécuter votre application en mode débogage.\n    <!-- markdownlint-disable MD033 -->\n    <details>\n    <summary>Découvrez ce qui se produit lorsque vous exécutez votre application localement dans le débogueur.</summary>\n\n    Lorsque vous **sélectionnez F5**, Teams Shared Computer Toolkit :\n\n    1. Vérifie toutes les conditions préalables suivantes :\n      * Prise en charge Node.js version est installée.\n      * Microsoft 365 compte est connecté et le chargement de version de version est activé. \n      * Ngrok est installé.           \n      * Les packages NPM pour l’extension de messagerie sont installés.\n      * Le port requis par l’application d’extension de messagerie est disponible.\n\n      > [!NOTE]\n      > Si Teams Shared Computer Toolkit ne parvient pas à vérifier l’un des prérequis, il vous invite à effectuer la même chose.\n      \n    2. Démarre Ngrok pour créer un tunnel HTTP.\n    3. Inscrit une application Azure AD et configure l’application.\n    4. Inscrit un bot dans Bot Framework et le configure.\n    5. Inscrit une application Teams dans Teams portail du développeur et configure l’application.\n    6. Démarre l’application d’extension de messagerie hébergée localement.\n    7. Démarre Teams dans un navigateur web avec une commande pour indiquer Teams charger une version Teams application.\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/f5run-mex.png\" alt-text=\"Screenshot showing when F5 key is pressed to debug.\":::\n\n    > [!NOTE]\n    > Lorsque vous exécutez l’application pour la première fois, toutes les dépendances sont téléchargées et l’application est conçue. Une fenêtre de navigateur s’ouvre lorsque la build est terminée. Ce processus peut prendre entre 3 et 5 minutes.\n\n    Teams s’ouvre dans un navigateur web.\n    \n1. Connectez-vous avec votre Microsoft 365, si vous y êtes invité.\n1. **Sélectionnez Ajouter** pour ajouter l’application à votre compte.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/add-mex-app-local-debug.png\" alt-text=\"Screenshot shows message to add the app\" border=\"false\":::\n\n    Le kit de ressources affiche un message pour indiquer que l’application est ajoutée à Teams.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-added-local-debug.png\" alt-text=\"Screenshot shows message to try the app now or later\" border=\"true\":::\n\n    - Si vous sélectionnez **Got it**, vous pouvez essayer l’application ultérieurement à partir de la liste des applications sideloaded.\n    - Si vous **sélectionnez Essayer**, Teams charge votre application.\n\n1. **Sélectionnez Essayer**.\n\n    L’application Extension de messagerie est chargée dans une application de bot de conversation.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/app-added-mex-local-debug.png\" alt-text=\"Capture d’écran  shows app sideloaded in Teams\" border=\"false\":::\n\n    Comme les applications d’extension de messagerie s’appuient sur des bots pour permettre la communication entre l’utilisateur et le service web, votre application se charge d’une fonctionnalité de conversation d’un bot.\n\n    - Si vous avez créé une application de bot avant de créer l’application d’extension de messagerie, vous pouvez voir qu’elle est chargée dans la même application de bot que celle que vous avez créée. Les messages de conversation précédents sont visibles.\n    - Si vous avez d’abord créé une extension de messagerie, votre application est chargée dans une conversation ouverte sur Teams.\n\n### <a name=\"test-your-app\"></a>Tester votre application\n\nLors du premier chargement de votre application, l’application d’extension de messagerie est ouverte pour que vous la testiez. Cet exemple d’application vous permet de rechercher des packages npm open source à partir du Registre logiciel.\n\n#### <a name=\"to-run-a-search-query\"></a>Pour exécuter une requête de recherche\n\n1. Nous allons entrer une chaîne de recherche dans la zone de recherche, telle que « cli ». Vous obtenez la liste des éléments correspondants :\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2//first-msgext/mex-search-string.png\" alt-text=\"Capture d’écran  shows how to use the app for search\" border=\"true\":::\n\n1. Sélectionnez-en un dans les résultats de la recherche. Il s’affiche dans la zone de composition afin que vous pouvez envoyer le résultat au canal.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-result.png\" alt-text=\"Capture d’écran  shows the search result\" border=\"false\":::\n\n1. Sélectionnez **les** instructions d’envoi.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-search-sent.png\" alt-text=\"Capture d’écran  shows the search result sent on chat\" border=\"false\":::\n\n    Maintenant, vous avez appris à créer et exécuter une application d’extension de messagerie de base !         \n\n## <a name=\"optional-scenarios\"></a>Scénarios facultatifs\n\nVous avez testé la fonctionnalité de recherche d’une application d’extension de messagerie de base. Vous pouvez maintenant tester d’autres fonctionnalités de cette application. Voici des scénarios facultatifs dans cette application.\n<br>\n<br>\n<details>\n<summary>Pour créer une carte</summary>\n\n1. **Sélectionnez Créer une carte**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/app-added-mex-local-debug.png\" alt-text=\"Capture d’écran  shows how to create a card\" border=\"false\":::\n\n1. Entrez les détails de la carte comme indiqué, puis sélectionnez **Envoyer**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-details.png\" alt-text=\"Capture d’écran  shows how to add a card details\" border=\"true\":::\n\n    Les détails de votre carte apparaissent dans la zone de composition.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-added.png\" alt-text=\"Capture d’écran  shows how to add a card details\" border=\"true\":::\n\n1. Sélectionnez **l’icône** Envoyer dans la zone de composition.\n\n    L’application envoie la carte sur la conversation du bot.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mex-card-sent.png\" alt-text=\"Capture d’écran  shows the card sent\" border=\"false\":::\n</details>\n<br>\n<details>\n<summary>Pour ouvrir votre application à partir de la zone de composition</summary>\n\nChoisissez l’une des méthodes suivantes pour ouvrir votre application.\n\n**Utilisation de `@mention`:**\n\n1. Entrez `@your-app-name` dans la zone de commande de votre application.\n    \n    L’application ouvre la zone de recherche et vous pouvez l’utiliser pour exécuter une requête.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/mention-mex-app.png\" alt-text=\"Capture d’écran  shows how to @mention the messaging extension app\" border=\"false\":::\n\n1. Entrez une chaîne de recherche, puis sélectionnez-en une dans le résultat de la recherche.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-box-search.png\" alt-text=\"Capture d’écran qui montre comment exécuter une recherche à l’aide de l’application d’extension de messagerie\" border=\"false\":::\n\n    Il s’affiche dans la zone de commande sous la mesure d’une carte.\n\n1. Copiez la carte pour la coller dans la zone de composition.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card.png\" alt-text=\"Capture d’écran  shows search result in a card\" border=\"false\":::\n    \n1. Envoyez la carte à l’aide de la zone de composition.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/command-search-card-sent.png\" alt-text=\"Capture d’écran  shows search result in a chat\" border=\"false\":::\n\n**À l’aide d’une icône à trois points :**\n\n1. Lancez l’extension de messagerie à partir de trois points en bas de la zone de composition.\n1. Sélectionnez votre application d’extension de messagerie.       \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/three-dot-mex.png\" alt-text=\"Capture d’écran qui montre comment ouvrir l’exemple d’application d’extension de messagerie\" border=\"false\":::\n\n    L’application d’extension de messagerie se charge avec les options pour exécuter une recherche et créer des cartes adaptatives.\n</details>\n<br>\n<details>\n<summary>Exécuter l’application à partir d’applications téléchargées de côté</summary>\n\nVous pouvez ouvrir une application de chargement Teams à partir de la liste des applications sideloaded. \n\n1. Sélectionnez **l’icône du Store** dans la barre Teams côté.\n1. Sélectionnez **Gérer les applications**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-msgext/sideloaded-apps.png\" alt-text=\"Capture d’écran  shows sideloaded apps\" border=\"false\":::\n\n1. Sélectionnez l’icône à trois points pour votre application, puis sélectionnez **Afficher les détails**. Vous pouvez également copier le lien vers l’application et l’utiliser pour ouvrir l’application.\n1. **Sélectionnez Ouvrir** pour charger l’application, puis **essayez.** \n    \n    L’application se charge en Teams.\n</details>\n<br>\n<br>\n<!-- markdownlint-disable MD033 -->\n<details>\n<summary>Découvrez comment résoudre les problèmes si votre application ne s’exécute pas localement.</summary>\n\nPour exécuter votre application dans Teams, vous devez avoir un compte Microsoft 365 de développement qui autorise le chargement de version de l’application. Pour en savoir plus sur le chargement d’une version de version de base, voir la section Conditions préalables.\n</details>\n"
- title: Déployer votre première application Teams de messagerie
  durationInMinutes: 1
  content: "\nVous avez appris à créer, créer et exécuter Teams application avec les fonctionnalités Tab, Bot et Extension de messagerie. La dernière étape consiste à déployer votre application sur Azure.\n\nDéployons la première application avec la fonctionnalité Onglet sur Azure à l’aide Teams Shared Computer Toolkit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Connectez-vous à votre compte Azure\n\nUtilisez ce compte pour accéder au portail Microsoft Azure et pour mettre en service de nouvelles ressources cloud pour prendre en charge votre application.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Ouvrez Visual Studio Code.\n1. Ouvrez le dossier de projet dans lequel vous avez créé l’application Onglet.\n1. Sélectionnez l Teams Shared Computer Toolkit:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: icône dans la barre latérale.  \n1. **Sélectionnez Se connectez à Azure**.\n\n    > [!TIP]\n    > Si l’extension de compte Azure est installée et que vous utilisez le même compte, vous pouvez ignorer cette étape. Utilisez le même compte que celui que vous utilisez dans d’autres extensions.\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte.\n1. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y invitez et revenir à Visual Studio Code.\n\n    La section **ACCOUNTS** de la barre latérale affiche les deux comptes séparément. Il répertorie également le nombre d’abonnements Azure utilisables disponibles. Assurez-vous que vous disposez d’au moins un abonnement Azure utilisable. Si ce n’est pas le cas, connectez-vous et utilisez un autre compte.\n\n    Vous êtes maintenant prêt à déployer votre application sur Azure !\n\n    Félicitations, vous avez créé trois types d’Teams applications ! \n    Maintenant, allons de l’avant et découvrez comment déployer l’une des applications dans Azure à l’aide du Teams Shared Computer Toolkit.\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous Microsoft 365 l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous laisser vous inscrire au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’CLI TeamsFx.\n\n    Félicitations, vous avez créé trois types d’Teams applications ! \n    Maintenant, allons de l’avant et découvrez comment déployer l’une des applications dans Azure à l’aide du Teams Shared Computer Toolkit.\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->.\n  <details>\n  <summary>Découvrir ce qui se produit lorsque vous avez déployé votre application vers Azure</summary>\n\n  Avant le déploiement, l’application s’est exécutée localement :\n\n  * Le serveur principal s’exécute en utilisant **Azure Functions Core Tools**.\n  * Le point de terminaison HTTP de l’application, dans lequel Microsoft Teams charge l’application, s’exécute localement.\n\n  Le déploiement est un processus en deux étapes. Vous provisionniez les ressources sur un abonnement Azure actif, puis déployez ou chargez le code frontal et frontal de l’application dans Azure.\n\n  * Le système back-end, s’il est configuré, utilise différents services Azure, notamment Azure App Service et stockage Azure.\n  * L’application frontale sera déployée sur un compte de stockage Azure configuré pour l’hébergement web statique.\n\n  </details>\n"
- title: Félicitations !
  durationInMinutes: 1
  content: "\nVous l’avez fait !\n\nVous avez créé trois applications, chacune avec une fonctionnalité différente : une application onglet, une application bot et une application d’extension de messagerie.\n\nMaintenant que vous avez appris à créer des applications de base, vous pouvez passer à la création d’applications plus complexes. Pour commencer, essayez d’ajouter des fonctionnalités à vos applications existantes.\n\nPour ajouter des fonctionnalités à votre application existante :\n\n1. **Sélectionnez Ajouter une** fonctionnalité dans **la section Développement** de la Teams Shared Computer Toolkit côté gauche.\n\n1. Sélectionnez la fonctionnalité que vous souhaitez ajouter à votre application.\n\nVoilà ! Teams Shared Computer Toolkit ajoute la structure de la nouvelle fonctionnalité à la structure d’annuaires de votre application. Suivez les procédures pour créer et déployer l’application, et votre application aura plusieurs fonctionnalités. \n\nVous avez terminé le didacticiel pour créer des applications avec JavaScript.\n"
