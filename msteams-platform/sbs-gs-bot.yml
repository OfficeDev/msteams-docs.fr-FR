### YamlMime:Tutorial
title: Créer votre première application de bot à l’aide de JavaScript
metadata:
  title: Hello World avec JavaScript
  description: Avec ce module d’apprentissage, vous allez apprendre à créer Hello World application avec JavaScript en configurant un nouveau projet avec Teams Toolkit, en créant et en déployant une application bot.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Revenir à La vue d’ensemble de la prise en main
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 16e4ca53b8c4b111da4c59c07e89d2d399784cb8
  ms.sourcegitcommit: 0e4fcbc5efff4bfa1dbfba1e5467bbfaa6638705
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 10/28/2022
  ms.locfileid: "68773535"
items:
- durationInMinutes: 1
  content: "Démarrez le développement d’applications Microsoft Teams avec votre première application Teams. Vous allez créer une application bot avec Teams. \n\nVotre application disposera d’une fonctionnalité, qui est fournie avec sa propre interface utilisateur et expérience utilisateur :\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"Diagramme montrant que cette application a trois fonctionnalités.\":::\n\n> [!NOTE]\n> Dans ce tutoriel, vous allez créer une application de bot.\n\nDans ce tutoriel, vous allez apprendre à :\n\n- Comment configurer un nouveau projet avec Teams Toolkit.\n- Comment créer une application de bot.\n- Comment déployer votre application.\n"
- title: Configuration requise
  durationInMinutes: 1
  content: "\nVoici une liste des outils dont vous aurez besoin pour créer et déployer vos applications.\n\n| &nbsp; | Installer | Pour l’utilisation... |\n| --- | --- | --- |\n| **Obligatoire** | &nbsp; | &nbsp; |\n| &nbsp; | [Toolkit Teams](#install-the-teams-toolkit) | Extension Microsoft Visual Studio Code qui crée une structure de projet pour votre application. Utilisez la version 4.0.0. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams pour collaborer avec toutes les personnes avec lesquelles vous travaillez via les applications pour les conversations, les réunions, les appels, le tout au même endroit.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Environnement runtime JavaScript principal. Utilisez la dernière version v16 LTS.|\n| &nbsp; | [Microsoft Edge](https://www.microsoft.com/edge) (recommandé) ou [Google Chrome](https://www.google.com/chrome/) | Un navigateur avec des outils de développement. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | Environnements de build JavaScript, TypeScript ou SharePoint Framework (SPFx). Utilisez la version 1.55 ou ultérieure. |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Outils Azure pour Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) et [Azure CLI](/cli/azure/install-azure-cli) | Outils Azure permettant d’accéder aux données stockées ou de déployer un back-end basé sur le cloud pour votre application Teams dans Azure. |\n| &nbsp; | [outils de développement React pour Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) OU [outils de développement React pour Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | Extension DevTools de navigateur pour la bibliothèque JavaScript open source React. |\n| &nbsp; | [Afficheur Microsoft Graph](https://developer.microsoft.com/graph/graph-explorer) | Explorateur Microsoft Graph, un outil basé sur un navigateur qui vous permet d’exécuter une requête à partir de données Microsoft Graph. |\n| &nbsp; | [Documentation pour les développeurs](https://dev.teams.microsoft.com/) | Portail web pour configurer, gérer et distribuer votre application Teams, y compris à votre organisation ou au magasin Teams. |\n\n\n> [!TIP]\n> Si vous utilisez des données Microsoft Graph, vous devez découvrir et ajouter un signet à l’Explorateur Microsoft Graph. Cet outil basé sur un navigateur vous permet d’interroger Microsoft Graph en dehors d’une application.\n\n\n## <a name=\"prepare-development-environment\"></a>Préparer l’environnement de développement\n\nUne fois que vous avez installé les outils requis, configurez l’environnement de développement.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Installer le kit de ressources Teams\n\nLe Kit de ressources Teams permet de simplifier le processus de développement avec des outils permettant de provisionner et de déployer des ressources cloud pour votre application, de publier dans le magasin Teams, etc. \n \nVous pouvez utiliser le kit de ressources avec Visual Studio Code ou l’interface CLI (interface de ligne de commande), appelée `TeamsFx`.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Ouvrez Visual Studio Code et sélectionnez la vue **Extensions** (**Ctrl+Maj+X** / **⌘⇧-X** ou **Afficher > Extensions**).\n1. Dans la zone de recherche, entrez **Teams Toolkit**.\n1. Sélectionnez **Installer** en regard du Kit de ressources Teams.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"Illustration montrant l’installation de l’extension Teams Toolkit.\":::\n\n L’icône du Kit de ressources Teams apparaît dans la barre latérale de Visual Studio Code après son installation.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Illustration montrant l’icône Teams Toolkit dans la barre latérale de Visual Studio Code.\":::\n\nVous trouverez également le Kit de ressources Teams sur la [Place de marché Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nPour installer l’interface CLI TeamsFx, utilisez le gestionnaire de `npm` package :\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nSelon votre configuration, vous devrez peut-être utiliser `sudo` pour installer l’interface CLI :\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nCette condition est plus courante sur les systèmes Linux et macOS.\n\nVeillez à ajouter le cache global npm à votre chemin d’accès. Cette étape est normalement effectuée dans le cadre du programme d’installation Node.js.  \n\nVous pouvez utiliser l’interface CLI avec la `teamsfx` commande . Vérifiez que la commande fonctionne en exécutant `teamsfx -h`.\n\n> [!CAUTION]\n> Avant de pouvoir exécuter TeamsFx dans les terminaux PowerShell, vous devez activer la stratégie d’exécution « signée à distance » pour PowerShell.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Configurer votre locataire de développement Teams\n\nUn **locataire** est comme un espace ou un conteneur pour votre organisation dans Teams, où vous discutez, partagez des fichiers et exécutez des réunions. Cet espace est également l’endroit où votre application est chargée et testée. Vérifions si vous êtes prêt à développer avec le locataire.\n\n### <a name=\"check-for-sideloading-option\"></a>Rechercher l’option de chargement indépendant\n\nAprès avoir créé l’application, vous devez charger votre application dans Teams sans la distribuer. Ce processus est appelé chargement indépendant. Connectez-vous à votre compte Microsoft 365 pour afficher cette option.\n\n > [!NOTE]\n > Le chargement indépendant est nécessaire pour l’aperçu et le test des applications dans l’environnement local Teams. S’il n’est pas activé, vous ne pourrez pas afficher un aperçu et tester votre application dans Teams localement.\n\nAvez-vous déjà un locataire et disposez-vous de l’accès administrateur ? Vérifions si vous le faites vraiment !\n\nVérifiez si vous pouvez charger une version test des applications dans Teams :\n\n 1. Dans le client Teams, sélectionnez l’icône **Store** .\n 1. Sélectionnez **Gérer vos applications**.\n 1. Sélectionnez **Publier une application**.\n 1. Recherchez l’option **Charger une application personnalisée**. Si vous voyez l’option , le chargement indépendant des applications est activé.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/spfx-custom-new1.png\" alt-text=\"accueil du bot\":::\n\n     > [!NOTE]\n     > Si vous n’avez pas la possibilité de charger une application personnalisée, contactez votre administrateur Teams.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Créer un locataire développeur Teams gratuit (facultatif)\n\nSi vous n’avez pas de compte de développeur Teams, vous pouvez l’obtenir gratuitement. Rejoignez le programme des développeurs Microsoft 365 !\n\n1. Accédez au[Programme pour les développeurs Microsoft 365](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Sélectionnez **Rejoindre maintenant** et suivez les instructions à l’écran.\n1. Dans l’écran d’accueil, sélectionnez **Configurer l’abonnement E5**.\n1. Configurez votre compte d’administrateur. Une fois que vous avez terminé, l’écran suivant s’affiche.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. Connectez-vous à Teams à l’aide du compte d’administrateur que vous venez de configurer. Vérifiez que vous disposez de l’option **Charger une application personnalisée** dans Teams.\n\n## <a name=\"get-a-free-azure-account\"></a>Obtenir un compte Azure gratuit\n\nSi vous souhaitez héberger votre application ou accéder aux ressources dans Azure, vous devez disposer d’un abonnement Azure. [Créez un compte gratuit](https://azure.microsoft.com/free/) avant de commencer.\n\nVous avez maintenant tous les outils et configuré votre compte. Ensuite, nous allons configurer votre environnement de développement et commencer à créer ! Sélectionnez l’application que vous souhaitez commencer.\n"
- title: Créer un espace de travail de projet pour votre application bot
  durationInMinutes: 1
  content: "\nCréons votre première application de bot.\n\nLa fonctionnalité de bot d’une application Teams crée un chatbot ou un bot conversationnel. Vous l’utilisez pour exécuter des tâches simples et automatisées, telles que la fourniture d’un service clientèle. Un bot communique avec un service web et vous aide à utiliser ses offres. Vous pouvez obtenir des prévisions météorologiques, effectuer des réservations ou tout autre service proposé à l’aide d’un bot conversationnel.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"Diagramme montrant que cette application a trois fonctionnalités. Bot est mis en surbrillance.\":::\n\nComme vous avez déjà préparé la création de ces applications, vous pouvez configurer un nouveau projet Teams pour créer l’application bot.\n\nDans ce tutoriel, vous allez apprendre à :\n\n1. [Comment configurer un nouveau projet de bot avec Teams Toolkit.](#create-your-bot-project-workspace)\n1. [À propos de la structure de répertoires de votre projet d’application.](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> Actuellement, les bots sont disponibles dans Cloud de la communauté du secteur public (GCC), mais pas dans GCC-High et department of Defense (DOD).\n\n## <a name=\"create-your-bot-project-workspace\"></a>Créer votre espace de travail de projet de bot\n\nSi les conditions préalables sont en place, commençons !\n\n> [!NOTE]\n> L’interface utilisateur visual Studio Code affichée provient de Mac. Il peut varier en fonction de votre système d’exploitation, de la version du Kit de ressources Teams et de l’environnement.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l’icône :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n1. Sélectionnez **Créer une application Teams**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-project.png\" alt-text=\"Emplacement du lien Création d’un projet dans la barre latérale du Kit de ressources Teams.\":::\n\n1. Sélectionnez **Créer une application Teams** pour créer une application à l’aide du Kit de ressources Teams.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app1.png\" alt-text=\"Démarrage de l’Assistant pour la Création d’un projet\":::\n\n1. Vérifiez que **Bot** est sélectionné comme fonctionnalité que vous souhaitez générer dans votre application.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-bot.png\" alt-text=\"Capture d’écran présentant comment ajouter des fonctionnalités à votre nouvelle application.\":::\n\n1. Sélectionnez **JavaScript** comme langage de programmation.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-tab.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\":::\n\n1. Sélectionnez **Dossier par défaut** pour stocker le dossier racine de votre projet à l’emplacement par défaut.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-default-location.png\" alt-text=\"Sélectionnez l’emplacement par défaut.\":::\n\n   Vous pouvez également modifier l’emplacement par défaut en procédant comme suit :\n\n   1. Sélectionnez **Parcourir**.\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-browse.png\" alt-text=\"Sélectionnez l’emplacement de navigation.\":::\n\n   1. Sélectionnez l’emplacement de l’espace de travail du projet.\n   1. Sélectionnez **Sélectionner un dossier**.\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\":::\n\n1. Entrez un nom approprié pour votre application, tel que `hellobot`. Vérifiez que le nom de votre application est alphanumérique. Ensuite, sélectionnez **Entrée**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hello-bot.png\" alt-text=\"Capture d’écran montrant où entrer le nom de l’application.\":::\n\n    Une boîte de dialogue s’affiche, dans laquelle vous devez choisir oui ou non pour faire confiance aux auteurs des fichiers de ce dossier.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/vsc-trust-authors.png\" alt-text=\"Cette capture d’écran est un exemple de boîte de dialogue pour approuver ou non les auteurs des fichiers dans ce dossier \":::\n\n1. Par défaut, le projet s’ouvre dans une nouvelle fenêtre dans un délai de 10 secondes. Si vous souhaitez ouvrir dans la fenêtre active, sélectionnez **Ouvrir dans la fenêtre active**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/new-window-notification.png\" alt-text=\"Nouvelle fenêtre contextuelle\":::\n\n    Votre application Teams avec une fonctionnalité de bot est créée en quelques secondes.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"Capture d’écran montrant l’application créée.\":::\n\n    Une fois votre application créée, le kit de ressources Teams affiche le message suivant :\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-project.png\" alt-text=\"Message d’emplacement\":::\n    \n    Sélectionnez **Débogage local** pour afficher un aperçu de votre projet.\n    \n<details>\n<summary>Récapitulatif rapide de la création d’une application Teams.</summary>\nRegardez ce bref récapitulatif pour la création d’une application Teams.\n\n![Créer une application Teams](~/assets/videos/javascript-bot-app1.gif)\n</details>\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nUtilisez le CLI `teamsfx` pou créer votre premier projet.  Commencez à partir du dossier dans lequel vous souhaitez créer le dossier du projet.\n\n``` bash\nteamsfx new\n```\n\nVous pouvez utiliser l’interface CLI pour créer une application Teams. L’interface CLI vous guide à travers une série de questions. Chaque question comprend une instruction sur la réponse.\n\nPar exemple, utilisez les touches de direction pour sélectionner une option. Une fois le choix fait, sélectionnez **Entrée** pour le confirmer.\n\n1. Sélectionnez **Créer une application Teams**.\n1. Sélectionnez **Bot** et désélectionnez **Tab**.\n1. Sélectionnez **JavaScript** comme langage de programmation.\n1. Sélectionnez **Entrée** pour sélectionner le dossier d’espace de travail par défaut.\n1. Entrez un nom approprié pour votre application, tel que `HelloBot`. Le nom de l’application doit contenir des caractères alphanumériques uniquement.\n\nUne fois que vous avez répondu à toutes les questions, votre projet est créé.\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>Découvrez le code source de l’application bot\n\nUne fois la génération de modèles automatique effectuée, affichez les répertoires et fichiers de projet dans la zone Explorateur de Visual Studio Code.\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/folder-structure-bot-app.png\" alt-text=\"Structure de dossiers.\":::\n\n| Nom du dossier | Sommaire |\n| --- | --- |\n| `.fx/configs` | Fichiers de configuration que l’utilisateur peut personnaliser pour l’application Teams. |\n| `.fx/configs/config.<envName>.json` | Fichier de configuration pour chaque environnement. |\n| `.fx/configs/azure.parameters.<envName>.json` | Fichier de paramètres pour le provisionnement d’Azure BICEP pour chaque environnement. |\n| `.fx/configs/projectSettings.json` | Paramètres de projet globaux qui s’appliquent à tous les environnements. |\n| `.fx/configs/ngrok.yml` | Paramètres ngrok|\n| `bot` |  Code pour la fonctionnalité bot requise lors de l’exécution. |\n| `bot/teamsBot.js` | Point d’entrée principal de l’application bot. |\n| `templates/appPackage` | Fichiers de modèle de manifeste d’application et icônes d’application, color.png et outline.png. |\n| `templates/appPackage/manifest.template.json` | Manifeste d’application pour l’exécution de l’application dans un environnement local et distant.  |\n| `templates/azure` | Fichiers de modèle BICEP |\n\n> [!Tip]\n> Familiarisez-vous avec les bots en dehors de Teams avant d’intégrer votre premier bot dans Teams.\n"
- title: Générer et exécuter votre première application de bot
  durationInMinutes: 1
  content: "\nAprès avoir configuré votre espace de travail de projet avec Teams Toolkit, générez votre projet de bot. Vérifiez que vous êtes connecté à votre compte Microsoft 365.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Connectez-vous à votre compte Microsoft 365\n\nUtilisez ce compte pour vous connecter à Teams. Si vous utilisez un locataire du programme de développement Microsoft 365, le compte d’administrateur que vous avez configuré lors de l’inscription est votre compte Microsoft 365.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Ouvrez Visual Studio Code.\n1. Sélectionnez l’icône Teams Toolkit  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: dans la barre latérale.\n1. Sélectionnez **Se connecter à M365**.\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte.\n\n1. Connectez-vous à votre compte Microsoft 365 à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y êtes invité et revenez à Visual Studio Code.\n1. Revenez à Teams Toolkit dans Visual Studio Code.\n\n    Utilisez ce compte pour vous connecter à Teams. Si vous utilisez un locataire du programme de développement Microsoft 365, le compte d’administrateur que vous avez configuré lors de l’inscription est votre compte Microsoft 365.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Capture d’écran montrant où se connecter à Microsoft 365 et Azure.\":::\n\n    Vous êtes maintenant prêt à générer l’application et à l’exécuter localement !\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous à Microsoft 365 avec l’interface CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’interface CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’interface CLI TeamsFx.\n\n    Maintenant que l’environnement de développement est configuré, vous pouvez créer, générer et déployer votre première application Teams.\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>Créer et exécuter votre première application de bot localement\n\nPour générer et exécuter votre application dans l’environnement local :\n\n1. Sélectionnez **F5** dans Visual Studio Code pour exécuter votre application en mode débogage.\n\n    > [!NOTE]\n    > Si le Kit de ressources Teams ne parvient pas à vérifier un prérequis particulier, il vous invite à le vérifier.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Découvrez ce qui se produit lorsque vous exécutez votre application localement dans le débogueur.</summary>\n\n    Si vous vous demandez, lorsque vous appuyez sur la touche **F5** , le Kit de ressources Teams :\n\n    1. Vérifie tous les prérequis suivants :\n      - Vous êtes connecté avec un compte Microsoft 365.\n      - Le chargement indépendant est activé pour votre compte Microsoft 365.\n      - La version Node.js prise en charge est installée.\n      - Ngrok est installé.\n      - Le port requis par l’application de bot est disponible.\n      \n    2. Installez les packages npm.\n    3. Démarre Ngrok pour créer un tunnel HTTP.\n    4. Inscrit l’application dans Azure AD et configure l’application.\n    5. Inscrit l’application bot dans Bot Framework et configure l’application bot.\n    6. Inscrit l’application dans le portail des développeurs Teams et configure l’application.\n    7. Démarre l’application bot.\n    8. Démarre Teams dans un navigateur web et charge une version test de l’application bot.\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"Capture d’écran montrant quand la touche F5 est enfoncée pour le débogage.\":::\n\n    > [!NOTE]\n    > Lorsque vous exécutez l’application pour la première fois, toutes les dépendances sont téléchargées et l’application est générée. Une fenêtre de navigateur s’ouvre automatiquement lors la build est terminée. Ce processus peut prendre trois à cinq minutes.\n\n    Teams exécute votre application dans un navigateur web.\n\n1. Connectez-vous avec votre compte Microsoft 365, si vous y êtes invité.\n\n1. Sélectionnez **Ajouter** lorsque vous êtes invité à charger une version test de l’application sur Teams sur votre ordinateur local.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Capture d’écran montrant l’ajout du bot sur le client Teams.\":::\n\n    Maintenant, le bot s’exécute correctement sur Teams ! Une fois l’application chargée, une session de conversation avec le bot s’ouvre.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Capture d’écran montrant le bot en cours d’exécution sur le client Teams.\":::\n\n    Vous pouvez taper `welcome` pour afficher une carte d’introduction et taper `learn` pour accéder à la documentation de la carte adaptative et des commandes de bot.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Capture d’écran montrant la carte d’apprentissage dans le bot sur le client Teams.\":::       \n\n    Vous pouvez effectuer des activités de débogage normales, telles que la définition de points d’arrêt, comme avec n’importe quelle autre application web. Ouvrez le fichier `bot/teamsBot.js`, puis localisez la méthode `onMessage()`. Définissez un point d’arrêt sur n’importe quel cas. Ensuite, tapez du texte.\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Découvrez comment résoudre les problèmes si votre application ne s’exécute pas localement.</summary>\n\n  Pour exécuter correctement votre application dans Teams, vérifiez que vous avez activé le chargement indépendant dans votre compte Teams. Pour en savoir plus sur le chargement indépendant, consultez la section Conditions préalables.\n\n  > [!IMPORTANT]\n  > Actuellement, les applications de chargement indépendant sont disponibles dans Government Community Cloud (GCC), GCC-High et DOD.\n\n  > [!TIP]\n  > Vérifiez les problèmes avant de charger une version test de votre application à l’aide de [l’outil de validation de l’application](https://dev.teams.microsoft.com/appvalidation.html). Cet outil est inclus dans le kit de ressources. Corrigez les erreurs pour charger une version test de l’application.\n  </details> \n"
- title: Déployer votre première application Teams
  durationInMinutes: 1
  content: "\nVous avez appris à créer, générer et exécuter une application Teams avec la fonctionnalité Bot. La dernière étape consiste à déployer votre application sur Azure.\n\nDéployons la première application avec la fonctionnalité Bot sur Azure à l’aide de Teams Toolkit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Connectez-vous à votre compte Azure\n\nUtilisez ce compte pour accéder à Microsoft Portail Azure et provisionner de nouvelles ressources cloud pour prendre en charge votre application.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Ouvrez Visual Studio Code.\n1. Ouvrez le dossier de projet dans lequel vous avez créé l’application onglet.\n1. Sélectionnez l’icône Teams Toolkit  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: dans la barre latérale.\n1. Sélectionnez **Se connecter à Azure**.\n\n    > [!TIP]\n    > Si l’extension compte Azure est installée et que vous utilisez le même compte, vous pouvez ignorer cette étape. Utilisez le même compte que celui que vous utilisez dans d’autres extensions.\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte.\n1. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y êtes invité et revenez à Visual Studio Code.\n\n    La section **COMPTES** de la barre latérale affiche les deux comptes séparément. Il répertorie également le nombre d’abonnements Azure utilisables disponibles. Vérifiez que vous disposez d’au moins un abonnement Azure utilisable. Si ce n’est pas le cas, déconnectez-vous et utilisez un autre compte.\n\n    Vous êtes maintenant prêt à déployer votre application sur Azure !\n\n    Félicitations, vous avez créé une application Teams ! \n    Nous allons maintenant apprendre à déployer l’une des applications sur Azure à l’aide du Kit de ressources Teams.\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cline)\n\n1. Connectez-vous à Microsoft 365 avec l’interface CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n2. Connectez-vous à Azure avec l’interface CLI TeamsFx :\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification. Fermez le navigateur lorsque vous y êtes invité.\n\n    Les connexions de compte sont partagées entre Visual Studio Code et l’interface CLI TeamsFx.\n\n    Félicitations, vous avez créé une application Teams ! \n    Nous allons maintenant apprendre à déployer l’une des applications sur Azure à l’aide du Kit de ressources Teams.\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Découvrir ce qui se produit lorsque vous avez déployé votre application vers Azure</summary>\n\n  Avant le déploiement, l’application s’est exécutée localement :\n\n  * Le serveur principal s’exécute en utilisant **Azure Functions Core Tools**.\n  * Le point de terminaison HTTP de l’application, dans lequel Microsoft Teams charge l’application, s’exécute localement.\n\n  Le déploiement est un processus en deux étapes. Vous provisionnez les ressources sur un abonnement Azure actif, puis vous déployez ou chargez le code back-end et front-end pour l’application dans Azure.\n\n  * Le back-end, s’il est configuré, utilise différents services Azure, notamment Azure App Service et Stockage Azure.\n  * L’application frontale sera déployée sur un compte de stockage Azure configuré pour l’hébergement web statique.\n\n  </details>\n"
- title: Félicitations !
  durationInMinutes: 1
  content: "\nTu l’as fait!\n\nVous avez créé une application de bot.\n\nMaintenant que vous avez appris à créer une application de base, vous pouvez passer à la création d’applications plus complexes. Pour commencer, essayez d’ajouter des fonctionnalités à vos applications existantes.\n\nPour ajouter des fonctionnalités à votre application existante :\n\n1. Sélectionnez **Ajouter des fonctionnalités** dans la section **Développement** de la barre latérale du Kit de ressources Teams.\n\n1. Sélectionnez la fonctionnalité que vous souhaitez ajouter à votre application.\n\nVoilà ! Teams Toolkit ajoute la structure de la nouvelle fonctionnalité à la structure de répertoires de votre application. Suivez les procédures pour générer et déployer l’application, et votre application aura plusieurs fonctionnalités. \n\nVous avez terminé le tutoriel pour créer un bot avec JavaScript.\n"
