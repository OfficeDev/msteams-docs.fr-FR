### YamlMime:Tutorial
title: Générer un bot de commandes avec JavaScript
metadata:
  title: Générer un bot de commandes avec JavaScript
  description: Dans ce didacticiel, vous allez apprendre à créer un bot de commandes avec JavaScript.
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: Revenir à ajouter une fonctionnalité
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 90018c91fed4abd89497283ef875eee633b5dff0
  ms.sourcegitcommit: 5070746e736edb4ae77cd3efcb2ab8bb2e5819a0
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 06/16/2022
  ms.locfileid: "66123488"
items:
- durationInMinutes: 1
  content: "Microsoft Teams vous permet d’automatiser les tâches répétitives à l’aide d’un bot de commandes. Il répond aux commandes simples envoyées dans les conversations avec des cartes adaptatives. \n\nDans ce didacticiel, vous allez apprendre :\n\n- Comment créer un bot de commandes avec Teams Toolkit.\n- À propos de la structure de répertoires de votre application.\n\nCe guide pas à pas vous aide à créer un bot de commandes avec Teams Toolkit. La sortie suivante s’affiche :\n\n  :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"sortie finale\" border=\"true\":::\n"
- title: Conditions préalables
  durationInMinutes: 1
  content: "\nVoici la liste des outils dont vous aurez besoin pour créer et déployer vos applications.\n\n| &nbsp; | Installer | Pour l’utilisation |\n| --- | --- | --- |\n| **Obligatoire** | &nbsp; | &nbsp; |\n| &nbsp; | [Toolkit Teams](#install-the-teams-toolkit) | Extension de code Microsoft Visual Studio qui crée une structure de projet pour votre application. Utilisez la version 4.0.0.  |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams collaborer avec toutes les personnes avec lesquelles vous travaillez via des applications pour la conversation, les réunions, les appels et tout cela au même endroit.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Environnement runtime JavaScript principal. Utilisez la version 14 ou 16.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (recommandé) ou [Google Chrome](https://www.google.com/chrome/) | Un navigateur avec des outils de développement. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript ou TypeScript, environnements de génération. Utilisez la dernière version. |\n| &nbsp; | [compte de développeur Microsoft 365](https://docs.microsoft.com/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Accès à Teams compte avec les autorisations appropriées pour installer une application. |\n\n> [!NOTE]\n> Le guide est testé sur Teams Toolkit version 4.0.0 et Nodejs version 14 et 16. Les étapes décrites dans ce guide peuvent fonctionner avec d’autres versions, mais elles n’ont pas été testées.\n\n## <a name=\"prepare-development-environment\"></a>Préparer l’environnement de développement\n\nUne fois que vous avez installé les outils requis, configurez l’environnement de développement.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Installer le kit de ressources Teams\n\nLe kit de ressources Teams simplifie le processus de développement avec des outils permettant de provisionner et de déployer des ressources cloud pour votre application, de publier dans le magasin Teams, etc. \n \nVous pouvez utiliser le kit de ressources avec Visual Studio Code ou CLI (interface de ligne de commande) appelée `TeamsFx`.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Ouvrez Visual Studio Code et sélectionnez **Extensions** (**Ctrl+Maj+X** / **⌘⇧-X** ou **Afficher les extensions >**).\n1. Dans la zone de recherche, entrez **Teams Toolkit**.\n1. Sélectionnez **Installer** en regard du kit de ressources Teams.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/teams-toolkit.png\" alt-text=\"Illustration montrant l’installation de l’extension Teams Toolkit.\" border=\"false\":::\n\n L’icône Teams Toolkit apparaît dans la barre latérale Visual Studio Code après son installation.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"L’illustration montre l’icône Teams Toolkit dans Visual Studio barre latérale Code.\" border=\"false\":::\n\nVous trouverez également le kit de ressources Teams sur la [place de marché Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nPour installer l’interface CLI TeamsFx, utilisez le gestionnaire de `npm` package :\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nSelon votre configuration, vous devrez peut-être l’utiliser `sudo` pour installer l’interface CLI :\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nIl est plus courant sur Linux et les systèmes macOS.\n\nVeillez à ajouter le cache global npm à votre chemin d’accès. Cette étape est normalement effectuée dans le cadre du programme d’installation Node.js.  \n\nVous pouvez utiliser l’interface CLI avec la `teamsfx` commande. Vérifiez que la commande fonctionne en exécutant `teamsfx -h`.\n\n> [!NOTE]\n> Avant d’exécuter TeamsFx dans les terminaux PowerShell, veillez à activer la stratégie d’exécution **signée à distance** pour PowerShell.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Configurer votre locataire de développement Teams\n\nUn **locataire** est comme un espace ou un conteneur dans lequel vous discutez, partagez des fichiers et exécutez des réunions pour votre organisation dans Teams. Vous pouvez également charger et tester votre application.\n\n### <a name=\"check-for-sideloading-option\"></a>Rechercher l’option de chargement indépendant\n\nAprès avoir créé l’application, vous devez charger votre application dans Teams sans la distribuer. C’est ce que l’on appelle le chargement indépendant. Connectez-vous à votre compte Microsoft 365 pour afficher cette option.\n\n > [!NOTE]\n > Le chargement indépendant est nécessaire pour afficher un aperçu et tester des applications dans Teams environnement local. Activez le chargement indépendant pour afficher un aperçu et tester votre application dans Teams localement.\n\nAvez-vous déjà un locataire et disposez-vous de l’accès administrateur ? Vérifions si c’est vraiment le cas !\n\nPour vérifier le chargement indépendant des applications dans Teams :\n\n 1. Dans le client Teams, sélectionnez **Store** .\n 1. Sélectionnez **Gérer vos applications**.\n 1. Sélectionnez **Publier une application**.\n 1. Recherchez l’option permettant de **Télécharger une application personnalisée**. Si vous voyez l’option, le chargement indépendant des applications est activé.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"L’illustration montre l’option permettant de charger une application personnalisée dans Teams.\":::\n\n     > [!NOTE]\n     > Contactez Teams administrateur, si vous n’avez pas la possibilité de charger une application personnalisée.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Créer un locataire de développeur Teams gratuit (facultatif)\n\nSi vous n’avez pas de compte de développeur Teams, vous pouvez l’obtenir gratuitement. Rejoignez le programme de développement Microsoft 365!\n\n1. Accédez au[Programme pour les développeurs Microsoft 365](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Sélectionnez **Joindre maintenant** et suivez les instructions à l’écran.\n1. Sélectionnez **Configurer l’abonnement E5** dans l’écran d’accueil.\n1. Configurez un compte d’administrateur. Une fois que vous avez terminé, l’écran suivant s’affiche.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\" border=\"true\":::\n\n1. Connectez-vous à Teams à l’aide du nouveau compte d’administrateur. Vous devez maintenant disposer de la **Télécharger une option d’application personnalisée**.\n"
- title: Générer un bot de commandes
  durationInMinutes: 1
  content: "**Pour générer un bot de commandes à l’aide de code Visual Studio**\n\n 1. Ouvrez Visual Studio Code.\n\n 1. Sélectionnez l’icône :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n 1. Sélectionnez **Créer une application Teams**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png\" alt-text=\"Emplacement du lien Création d’un projet dans la barre latérale du Kit de ressources Teams.\" border=\"true\":::\n\n 1. Sélectionnez **Créer une nouvelle option d’application Teams** pour créer une application à l’aide de Teams Toolkit.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/create-new-app.png\" alt-text=\"L’Assistant démarre pour créer un projet\" border=\"true\":::\n\n 1. Vérifiez que **le bot de commande** est sélectionné comme fonctionnalité que vous souhaitez créer dans votre application.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-bot.png\" alt-text=\"Sélectionner la fonctionnalité d’application\" border=\"true\":::\n\n 1. Sélectionnez le **serveur Restify du déclencheur HTTP** comme déclencheur.\n 1. Sélectionnez **OK**.\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-trigger.png\" alt-text=\"Sélectionner un déclencheur\" border=\"true\":::\n\n 1. Sélectionnez **JavaScript** comme langage de programmation.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-script.png\" alt-text=\"Capture d’écran présentant comment sélectionner le langage de programmation.\" border=\"true\":::\n \n 1. Sélectionnez l’emplacement de l’espace de travail du projet.\n 1. **Sélectionnez Sélectionner un dossier**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/select-folder.png\" alt-text=\"Sélectionnez Dossier.\" border=\"true\":::\n \n 1. Entrez un nom approprié pour votre application, tel que le commandbot comme nom d’application. \n 1. Ensuite, sélectionnez **Entrée**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/app-name.png\" alt-text=\"Nom de l’application.\" border=\"true\":::\n\n     > [!NOTE]\n     > Veillez à utiliser uniquement des caractères alphanumériques dans le nom de l’application.\n\n     L’application du bot de commande est créée en quelques secondes.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/command-bot.png\" alt-text=\"Capture d’écran montrant l’application créée.\" border=\"true\":::\n\n 1. Sélectionnez **l’icône Exécuter et déboguer** :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\"::: dans la barre latérale Visual Studio Code.\n\n 1. Sélectionnez **Debug(Edge)** ou **Debug(Chrome)** dans la liste déroulante.\n\n 1. Sélectionnez **le bouton Démarrer le débogage** .\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/debug-app.png\" alt-text=\"Application de débogage\" border=\"true\":::\n\n 1. Sélectionnez **Ajouter**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/add-app.png\" alt-text=\"Ajouter une application\" border=\"true\":::     \n\n 1. Sélectionnez le bot de commandes.\n \n 1. Ensuite, sélectionnez **Entrée**.\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png\" alt-text=\"Ajouter une liste déroulante d’applications\" border=\"true\":::  \n\n    Vous recevrez la réponse de commande suivante dans la carte adaptative :\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/final-output.png\" alt-text=\"sortie finale\" border=\"true\":::      \n\n ## <a name=\"take-tour-of-source-code\"></a>Visite guidée du code source\n\n Teams Toolkit fournit des composants pour la création d’une application. Après avoir créé le projet, vous pouvez afficher les dossiers et fichiers du projet dans la zone **Explorateur** de Visual Studio Code.\n\n   :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/folder-structure.png\" alt-text=\"onglet structure\" border=\"true\":::\n\n Si vous choisissez d’utiliser l’infrastructure d’interface utilisateur, l’exemple de code suivant fournit une structure avec React composants. Il contient le contenu suivant :\n\n | Nom de fichier | Sommaire |\n | --- | --- |\n | `bot/src/internal/initialize.js` | Créer l’adaptateur de bot global et initialiser avec Teams Frameworks |\n | `bot/src/index.js` | Code du serveur pour héberger l’application bot et écouter /api/messages pour traiter Teams activité avec Bot Framework |\n | `bot/src/helloworldCommandHandler.js` | Gestionnaire de commandes Hello World pour traiter une commande helloworld et retourner une carte adaptative comme réponse |\n | `bot/src/adaptiveCards/*.json` | Fichier JSON de carte adaptative utilisé comme réponse de commande |\n"
- title: Déployer votre première application Teams
  durationInMinutes: 1
  content: "\nVous avez appris à créer et exécuter Teams application avec la fonctionnalité de bot de commande. La dernière étape consiste à déployer votre application sur Azure.\n\nDéployons la première application avec la fonctionnalité de bot de commande sur Azure à l’aide de Teams Toolkit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Se connecter à votre compte Azure\n\nUtilisez votre compte pour accéder au portail Microsoft Azure et fournir de nouvelles ressources cloud pour prendre en charge votre application.\n\n1. Ouvrez Visual Studio Code.\n1. Ouvrez le dossier de projet que vous avez créé l’application de bot de commande.\n1. Sélectionnez l’icône Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: dans la barre latérale.\n1. Sélectionnez **Se connecter à Azure**.\n\n    > [!TIP]\n    > Si l’extension de compte Azure est installée et que vous utilisez le même compte, vous pouvez ignorer cette étape.\n\n    Votre navigateur web par défaut s’ouvre pour vous permettre de vous connecter au compte.\n1. Connectez-vous à votre compte Azure à l’aide de vos informations d’identification.\n1. Fermez le navigateur lorsque vous y êtes invité et revenez à Visual Studio Code.\n\n    La section **COMPTES** de la barre latérale affiche les deux comptes séparément. Il répertorie également le nombre d’abonnements Azure utilisables disponibles.\n    \n    > [!NOTE]\n    > Vérifiez que vous disposez d’au moins un abonnement Azure utilisable.\n\n    Vous êtes maintenant prêt à déployer votre application sur Azure !\n\n## <a name=\"deploy-your-app-to-azure\"></a>Déployer votre application vers Azure\n\n Sous **DEPLOYMENT** , vous pouvez provisionner les ressources cloud nécessaires et le code de votre application est copié dans les ressources cloud créées.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Sélectionnez l’icône :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: du kit de ressources Teams dans la barre latérale Visual Studio Code.\n\n1. Sélectionnez **Provisionner dans le cloud** sous **DEPLOYMENT**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-cloud.png\" alt-text=\"Capture d’écran montrant les commandes d’approvisionnement\" border=\"true\":::\n\n1. Sélectionnez un groupe de ressources existant ou créez-le.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/subscription-cloud.png\" alt-text=\"Capture d’écran montrant les ressources pour l’approvisionnement\" border=\"true\":::\n\n    > [!NOTE]\n    > Une boîte de dialogue s’affiche, indiquant que des coûts peuvent être engagés lors de l’exécution de ressources dans Azure.\n\n1. Sélectionnez **Provision**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/provision-confirm.png\" alt-text=\"Capture d’écran de la boîte de dialogue d’approvisionnement.\" border=\"true\":::\n\n   Le processus d’approvisionnement crée des ressources dans le cloud Azure. Vous pouvez surveiller la progression en observant les dialogues dans le coin inférieur droit. Après quelques minutes, vous voyez l’avis suivant :\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-provision-success.png\" alt-text=\"Capture d’écran montrant la boîte de dialogue d’approvisionnement complet.\" border=\"true\":::\n\n     Vous avez la possibilité d’afficher les ressources approvisionnées. Pour ce didacticiel, vous n’avez pas besoin d’afficher les ressources.\n\n1. Sélectionnez **Déployer dans le cloud** sous **DÉPLOIEMENT** une fois l’approvisionnement terminé.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/deploy-cloud.png\" alt-text=\"Capture d’écran montrant l’emplacement où cliquer pour déployer dans le cloud.\" border=\"true\":::\n\n1. Sélectionnez **Déployer**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/Deploy-confirm.png\" alt-text=\"Déployer pour confirmer.\" border=\"true\":::\n\n   Le déploiement prend un certain temps. Vous pouvez surveiller la progression dans la boîte de dialogue dans le coin inférieur droit. Après quelques minutes, vous voyez l’avis suivant.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/command-deploy-confirm.png\" alt-text=\"Déployer confirmer.\" border=\"true\":::\n\n\n1. Ouvrez le panneau de débogage (**Ctrl+Maj+D** / **⌘⇧-D** ou **Afficher > Exécuter**) à partir de Visual Studio Code.\n1. Sélectionnez **Lancer à distance (Edge)** dans la liste déroulante de configuration de lancement.\n1. Sélectionnez **le bouton Démarrer le débogage** .\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/remote-debug.png\" alt-text=\"Débogage distant.\" border=\"true\":::\n\n1. Sélectionnez **Ajouter**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/app-cloud-output.png\" alt-text=\"Sortie du cloud d’application.\" border=\"true\":::\n\n1. Sélectionnez le bot de commandes.\n1. Ensuite, sélectionnez **Entrée**.  \n\n    :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/hello-world-cloud.png\" alt-text=\"commande Hello World\" border=\"true\":::\n\n    Vous recevrez la réponse de commande suivante dans la carte adaptative :\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-command-bot/cloud-final-output.png\" alt-text=\"Sortie finale du cloud\" border=\"true\":::\n\n# <a name=\"command-line\"></a>[Ligne de commande](#tab/cli)\n\nDans la fenêtre de votre terminal :\n\n1. Exécuter `teamsfx new` pour créer un projet.\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. Exécutez cette commande `teamsfx provision` pour créer une ressource Azure.\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. Exécutez cette opération `teamsfx deploy` pour déployer l’application.\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. Exécuter `teamsfx preview` pour exécuter l’application.\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: Relever le défi
  durationInMinutes: 1
  content: >
    Tu as trouvé quelque chose comme ça ?


    :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="Sortie finale du cloud" border="true":::
- content: Vous avez terminé le didacticiel pour créer une application de réponse de commande.
