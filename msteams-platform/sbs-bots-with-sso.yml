### YamlMime:Tutorial
title: Teams Bot avec 3 000 000 000 000
metadata:
  title: Teams Bot avec sso
  description: Dans ce didacticiel, vous allez apprendre à configurer l' luiso dans un bot pour Teams.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: En savoir plus sur l’authentification bot
  ms.custom: mvc
  ms.openlocfilehash: 1b95b4010ce1c3b1340c1ddb4357645383c93497
  ms.sourcegitcommit: b83e1ade63869be10e4fcdc963d6bab7c5311a5b
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 08/26/2021
  ms.locfileid: "58538159"
items:
- durationInMinutes: 1
  content: "Teams bots sont des bots conversationnels qui exécutent des tâches automatisées répétitives réalisées par les utilisateurs, telles que le service clientèle. L’utilisateur doit se connecter avec ses informations d’identification plusieurs fois pour effectuer des tâches répétitives. La méthode d’authentification unique (SSO) dans Azure Active Directory (AAD) actualise silencieusement le jeton d’authentification. Cela permet de réduire le nombre de fois que les utilisateurs ont besoin d’entrer leurs informations d’identification de connexion. \n\nUn bot se comporte différemment en fonction de la conversation dans qui il est impliqué :\n\n* Les bots dans les conversations de canal et de groupe nécessitent que l’utilisateur @mention le bot.\n* Les bots dans une conversation à deux n’ont pas besoin d’être @mentionnés. Tous les messages envoyés par l’utilisateur sont acheminés vers le bot.\n\nCe guide pas à pas vous aide à créer un bot avec l’authentification sso activée. Vous verrez le résultat suivant :\n\n![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)\n"
- title: Configuration requise
  durationInMinutes: 1
  content: "Veillez à installer les outils suivants et à configurer votre environnement de développement :  \n\n* Microsoft Teams avec un compte (et non un compte invité)\n* [ngrok](https://ngrok.com/) ou solution de tunneling équivalente\n* Visual Studio 2019 ou la dernière version\n* [Microsoft 365 de développeur ou](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) l’accès Teams un compte avec les autorisations appropriées pour installer une application\n"
- title: Configurer un bot dans Azure Bot Service
  durationInMinutes: 5
  content: "Pour authentifier le bot avec l’authentification sso, vous pouvez configurer le bot dans Azure Bot Service. Inscrivez le bot auprès d’Azure Bot Service lorsque vous le développez et l’hébergez dans Azure. Effectuez les opérations suivantes :\n\n* Utilisez ngrok pour créer un tunnel vers les points de terminaison de votre serveur web.\n* Créez une ressource Azure Bot pour inscrire le bot auprès d’Azure Bot Service.\n* Créez une secret client qui permet l’authentification sso du bot.\n* Ajoutez Microsoft Teams canal pour déployer le bot sur un canal Teams’accès.\n* Ajoutez le point de terminaison de messagerie au tunnel ngrok que vous avez créé.\n\nUtilisez ngrok pour créer un tunnel vers les points de terminaison HTTPS disponibles publiquement de votre serveur web exécutant localement. Exécutez la commande suivante dans ngrok :\n\n```bash\nngrok http -host-header=rewrite 3978\n```\n\n**Pour créer une ressource Azure Bot**\n\n1. Accédez au [Portail Azure](https://portal.azure.com/).\n1. Sélectionnez **Créer une ressource**.\n1. Dans la zone de recherche, entrez **le bot Azure** et sélectionnez la touche Entrée.\n1. Sélectionnez **Azure Bot**.\n\n    ![Créer une carte de bot Azure](~/assets/images/bots/createazurebot.png)\n\n1. Sélectionnez **Créer**.\n1. Entrez le nom de handle de bot requis dans **le handle bot.**\n1. Dans la liste **de** listes des abonnements, sélectionnez l’abonnement.\n1. Dans la liste **de listes** des groupes de ressources, sélectionnez le groupe de ressources.\n    \n    Pour créer une ressource, sélectionnez Créer une ressource, entrez le  nom de la ressource, **sélectionnez OK** et sélectionnez l’emplacement requis dans la liste de listes de listes des emplacements du nouveau groupe de ressources. \n\n    > [!NOTE]\n    > Dans la section ID de l’application Microsoft, créer **un ID d’application Microsoft** est déjà sélectionné. Vous pouvez sélectionner **Utiliser l’inscription d’application** existante, entrer **l’ID** d’application existant et entrer **le mot de passe de l’application existante.**\n\n1. Sélectionnez **Examiner et créer**.\n\n    <img src=\"~/assets/images/bots/Azurebotcreate.png\" alt=\"Create resource Azure bot\" width=\"700\"/>\n\n1. Si la validation est validée, sélectionnez **Créer.**\n\n    La mise en service de votre service de bot prend quelques instants.\n\n1. Sélectionnez **Accéder à la ressource**. Le bot et les ressources associées sont répertoriés dans le groupe de ressources.\n\n    Votre bot Azure a maintenant été créé.\n\n    ![Ressource de bot Azure créée](~/assets/images/bots/Azurebotresource.png)\n\n**Pour créer une secret client**\n\n1. Dans **Paramètres,** sélectionnez **Configuration.** Enregistrez **l’ID de** l’application Microsoft (ID client) pour référence ultérieure.\n1. Adjacent à **l’ID de l’application Microsoft,** sélectionnez **Gérer.**\n\n    ![ID d’application Microsoft](~/assets/images/bots/MicrosoftAppID.png)\n\n1. Dans la section **Secrets client,** sélectionnez **Nouvelle secret client**. La **fenêtre Ajouter une secret client** s’affiche.  \n\n1. Entrez **la description,** puis sélectionnez **Ajouter.**\n\n    <img src=\"~/assets/images/bots/addclientsecret.png\" alt=\"Add client secret to app\" width=\"500\"/>\n\n1. Dans la **colonne Valeur,** sélectionnez Copier dans le **Presse-papiers** et enregistrez l’ID de la question secrète client pour référence ultérieure.\n\n   ![Valeur de la secret client](~/assets/images/bots/valueclientsecret.png)\n\n**Pour ajouter le canal Microsoft Teams’accès**\n\n1. Go to **Home**.\n\n    <img src=\"~/assets/images/bots/homepage.png\" alt=\"Home page\" width=\"600\"/>\n\n1. Ouvrez votre bot, qui est répertorié dans la section **Ressources récentes.**\n1. Sélectionnez **Canaux** dans le volet gauche et **sélectionnez Teams** <img src=\"~/assets/images/bots/teamsicon.png\" alt=\"Teams icon\" width=\"20\"/>.\n1. Sélectionnez **Enregistrer**.\n1. Cochez la case pour accepter les conditions d’utilisation et sélectionnez **Accepter.**\n\n**Pour ajouter un point de terminaison de messagerie**\n\n1. Dans **Paramètres** pour le bot Azure que vous avez créé, sélectionnez **Configuration**.\n1. Go to ngrok.\n1. Copiez l’URL HTTPS (https to io) comme illustré dans l’image suivante :\n\n    ![URL HTTPS ngrok](~/assets/images/bots/ngrokURL.png)\n\n1. Dans **le point de terminaison de messagerie,** utilisez l’URL HTTPS disponible à partir de ngrok et à la fin de l’URL ajouter **/api/messages**.\n\n    <img src=\"~/assets/images/bots/messagingURL.png\" alt=\"Messaging endpoint\" width=\"600\"/>\n\n1. Sélectionnez **Appliquer**.\n\n    Vous avez correctement installé un bot dans Azure Bot Service et vous devez maintenant configurer la connexion au service de bot.\n"
- title: Configurer l' sso pour votre bot
  durationInMinutes: 5
  content: >
    Pour vous assurer que le bot Service permet à l’utilisateur de se connecter et d’accéder au bot, vous devez configurer l' utilisateur sso pour votre bot. Pour ce faire, effectuez les étapes suivantes :


    * Ajoutez l’URI de redirection à la ressource du bot Azure.

    * Exposer le point de terminaison de l’API pour spécifier l’emplacement à partir de lequel les ressources sont accessibles.

    * Configurer la connexion au service bot.


    **Pour ajouter un URI de redirection à la ressource du bot Azure**


    1. Dans le volet gauche de votre ressource bot, sélectionnez **Authentification.**

    1. Dans **les configurations de plateforme,** **sélectionnez Ajouter une plateforme.**

    1. Sélectionnez **Web**.


    1. Entrez **les URIs de** **https://token.botframework.com/.auth/web/redirect** redirection en tant que, puis **sélectionnez Configurer.**

        <img src="~/assets/images/bots/redirectURI.png" alt="Configure Redirect URI" width="600"/>

        L’URI de redirection est ajouté à la ressource du bot Azure.

        ![URI de redirection ajouté à la ressource bot](~/assets/images/bots/redirectURIadded.png)

    **Pour exposer le point de terminaison de l’API**


    1. Dans le volet gauche, sélectionnez **Exposer une API.**

    1. Sélectionnez **Définir** pour l’URI d’ID d’application.

    1. Utilisez l’URI d’ID d’application affiché et **api://botid-** au début de l’URI.

        <img src="~/assets/images/bots/exposeAPI.png" alt="Expose an API" width="500"/>

    1. Sélectionnez **Enregistrer**. Enregistrez **l’URI de l’ID d’application** pour référence ultérieure.

    1. Sélectionnez **Ajouter une étendue**.

    1. Dans **le nom de l’étendue,** entrez **access_as_user**.

    1. Dans **Qui pouvez-vous consentir ?**, basculer vers Les **administrateurs et les utilisateurs**.

    1. Entrez les valeurs suivantes dans les zones :

        | Champ | Valeur |
        | ----- | ----- |
        | Nom complet du consentement de l’administrateur | Teams pouvez accéder au profil de l’utilisateur |
        | Description du consentement de l’administrateur | Permet Teams d’appeler les API web de l’application en tant qu’utilisateur actuel. |
        | Nom complet du consentement de l’utilisateur | Teams pouvez accéder à votre profil utilisateur et effectuer des demandes en votre nom |
        | Description du consentement de l’utilisateur | Activez Teams pour appeler les API de cette application avec les mêmes droits que vous. |

    1. Vérifiez que **State** est défini comme **Enabled**.

        <img src="~/assets/images/bots/addscope.png" alt="Add a scope to app" width="500"/>

    1. Sélectionnez **Ajouter une étendue**. Le nom de l’étendue correspond automatiquement à l’URI de l’ID d’application, **avec /access_as_user** ajouté à la fin.

        ![API exposée et étendue ajoutée](~/assets/images/bots/ExposeAPIandaddscope.png)

    **Pour configurer la connexion bot service**


    1. Sélectionnez **Ajouter une connexion OAuth Paramètres**.

    1. Dans **Nouveau paramètre de connexion,** entrez les détails suivants :

        | Champ | Valeur ou description |
        | ----- | ----- |
        | Nom | Entrez le nom de votre nouveau paramètre de connexion. Vous pouvez utiliser le nom dans les paramètres de votre code de service de bot. |
        | Fournisseur de services | Sélectionnez **Azure Active Directory V2**. |
        | ID client | Enregistré précédemment en tant **qu’ID d’application Microsoft.** |
        | Secret client | Enregistré précédemment sous **la valeur de** l’ID de la secret client. |
        | URL de Exchange jeton | Utilisez **l’URL d’ID d’application** obtenue précédemment lors de l’exposition du point de terminaison de l’API. |
        | ID client | Entrez **commun**. |
        | Étendues | Entrez **User.Read et** ajoutez également toutes les **étendues requises** tout en spécifiant des autorisations pour les API en aval. |

        <img src="~/assets/images/bots/botserviceconnection.png" alt="Bot Service connection" width="300"/>

    1. Sélectionnez **Enregistrer**.

    1. Sélectionnez **Appliquer**.
- title: Configurer et exécuter votre exemple de bot
  durationInMinutes: 1
  content: >
    Configurez l’exemple de bot pour comprendre comment authentifier le bot de conversation dans Microsoft Teams.


    **Pour configurer et exécuter votre exemple de bot**


    1. Ouvrez Visual Studio.

    1. Dans Visual Studio, **sélectionnez Cloner un référentiel.**

    1. Dans **l’emplacement du référentiel,** entrez **https://github.com/OfficeDev/Microsoft-Teams-Samples.git** . Veillez à noter le **chemin d’accès** où le référentiel est cloné.

    1. Sélectionnez **Fichier > Ouvrir > Project/Solution.**

    1. Go to **Microsoft-Teams-Samples > samples > bot-conversation-sso-quickstart > csharp_dotnetcore** folder.

    1. Ouvrez **le fichier BotSSOCSharp.csproj.**

    1. Ouvrez le **appsettings.jsfichier** on.

    1. Mettez à **jourappsettings.jsla** configuration du bot pour qu’il utilise et `MicrosoftAppId` `MicrosoftAppPassword` . Utilisez le nom de connexion OAuth comme nom **de connexion.**

        > [!NOTE]
        > Vous pouvez obtenir cette dernière `MicrosoftAppId` à partir de la page configuration du bot. Il `MicrosoftAppPassword` s’agit de la valeur de l’ID de secret client que vous avez enregistré précédemment.

        ![JSON Appsettings](~/assets/images/bots/appsettingsjson.png)

    1. Sélectionnez **la touche F5** pour exécuter ce projet.

        <br>

        <details>

        <summary><b>Résolution des problèmes</b></summary>

        Si vous obtenez l’erreur de package Impossible **de trouver,** suivez les étapes suivantes :

        1.  Go to **Tools**  >  **NuGet Gestionnaire de package**  >  **Gestionnaire de package Paramètres**.
        1.  Dans la **fenêtre Options** qui s’affiche, **sélectionnez NuGet Gestionnaire de package** sources de  >  **package.**
        1.  Sélectionnez **Ajouter**.
        1.  In **Name**, enter **nuget.org** and in **Source**, enter **https://api.nuget.org/v3/index.json** .
        1.  Sélectionnez **Mettre à** jour et **OK.**
        1.  Reconstruire votre projet.
        <br>

        </details>
- title: Configurer et exécuter l’application Teams de messagerie
  durationInMinutes: 2
  content: >
    La façon la plus complète de tester votre bot consiste à créer un package d’application et à le télécharger sur Teams. Cette méthode est le seul moyen de tester toutes les fonctionnalités disponibles pour votre bot, dans toutes les étendues. Vous pouvez configurer et exécuter l’application Teams en chargeant **le fichiermanifest.zip'application.**


    **Pour exécuter l’Teams en chargeant le fichier manifest.zip**


    1. Dans Visual Studio, allez dans le **dossier appPackage/.**

    1. Ouvrez le **manifest.jsfichier** on.

    1. Dans le **manifest.js,** recherchez **{TODO : MicrosoftAppId}** et remplacez-le par votre ID d’application Microsoft.

    1. Dans Windows Explorer, allez dans le dossier **AppPackage de Microsoft-Teams-Samples > > bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage.**

    1. Compressez le contenu du **dossier appPackage/pour** créer des **manifest.zip**.

    1. Go to Teams.

    1. Pour télécharger **manifest.zip,** sélectionnez **Windows Store > Gérer** vos applications > Télécharger une application personnalisée et ouvrir **manifest.zip**.

    1. Sélectionnez **Ajouter** pour ajouter le bot de conversation à votre conversation.

        Vous pouvez interagir avec ce bot en lui envoyant un message. Le bot échange un jeton DSO et appelle l’API Graph en votre nom et renvoie les résultats. Il vous maintient en connexion, sauf si vous envoyez un message à **la connexion.**

    1. Envoyez un message au bot. Le bot de conversation demande des autorisations pour la première fois.

        ![Autorisations pour le bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

    1. Sélectionnez **Continuer** pour accepter les autorisations.


    1. Sélectionnez **Accepter** **pour les autorisations demandées.**

        ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
- title: Défi complet
  durationInMinutes: 1
  content: >
    Avez-vous eu un projet comme celui-ci ?


    ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
- content: Vous avez terminé le didacticiel pour commencer à utiliser l' sso dans un bot Microsoft Teams l’aide de Bot Framework.
