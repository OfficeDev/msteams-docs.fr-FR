### YamlMime:Tutorial
title: Teams Bot avec authentification unique
metadata:
  title: Teams Bot avec  ssO
  description: 'Dans ce didacticiel, vous allez apprendre à configurer l’luiso dans un bot pour Teams.'
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: En savoir plus sur l’authentification bot
  ms.custom: mvc
  ms.localizationpriority: high
items:
  - durationInMinutes: 1
    content: |
      Teams bots sont des bots de conversation qui exécutent des tâches automatisées répétitives réalisées par les utilisateurs, telles que le service clientèle. L’utilisateur doit se connecter avec ses informations d’identification plusieurs fois pour effectuer des tâches répétitives. La méthode d’authentification unique (SSO) dans Azure Active Directory actualisez silencieusement le jeton d’authentification. Cela permet de réduire le nombre de fois que les utilisateurs doivent entrer leurs informations d’identification de connexion. 

      Un bot se comporte différemment en fonction de la conversation dans qui il est impliqué :

      * Les bots dans les conversations de canal et de groupe nécessitent que l’utilisateur @mention le bot.
      * Les bots dans une conversation à deux n’ont pas besoin d’être @mentionnés. Tous les messages envoyés par l’utilisateur sont acheminés vers le bot.

      Ce guide pas à pas vous aide à créer un bot avec l’authentification sso activée. Vous verrez le résultat suivant :

      ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
  - title: Conditions préalables
    durationInMinutes: 1
    content: |
      Veillez à installer les outils suivants et à configurer votre environnement de développement :  

      * Compte Microsoft Teams actif avec une image de profil

        > [!TIP]
        > Assurez-vous Microsoft Teams compte n’est pas un compte invité.

      * [ngrok](https://ngrok.com/) ou solution de tunneling équivalente

        > [!NOTE]
        > Après avoir téléchargé ngrok, inscrivez-vous et installez [authtoken](https://ngrok.com/download).

      * Visual Studio 2019 ou la dernière version
      * [Microsoft 365 de développeur ou](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) l’accès Teams un compte avec les autorisations appropriées pour installer une application
  - title: Configurer un bot dans Azure Bot Service
    durationInMinutes: 5
    content: |
      Pour authentifier le bot avec l’authentification sso, vous pouvez configurer le bot dans Azure Bot Service. Inscrivez le bot auprès d’Azure Bot Service lorsque vous le développez et l’hébergez dans Azure. Effectuez les opérations suivantes :

      * Utilisez ngrok pour créer un tunnel vers les points de terminaison de votre serveur web.
      * Créez une ressource Azure Bot pour inscrire le bot auprès d’Azure Bot Service.
      * Créez une secret client qui permet l’authentification sso du bot.
      * Ajoutez Microsoft Teams canal pour déployer le bot sur un canal Teams’accès.
      * Ajoutez le point de terminaison de messagerie au tunnel ngrok que vous avez créé.

      Utilisez ngrok pour créer un tunnel vers les points de terminaison HTTPS disponibles publiquement de votre serveur web exécutant localement. Exécutez la commande suivante dans ngrok :

      ```bash
      ngrok http -host-header=rewrite 3978
      ```

      **Pour créer une ressource Azure Bot**

      1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
      1. Sélectionnez **Créer une ressource**.
      1. Dans la zone de recherche, entrez **le bot Azure** et sélectionnez la touche Entrée.
      1. **Sélectionnez Azure Bot**.

          ![Créer une carte de bot Azure](~/assets/images/bots/createazurebot.png)

      1. Sélectionnez **Créer**.
      1. Entrez le nom de handle de bot requis dans **le handle bot**.
      1. Dans la liste **de** listes des abonnements, sélectionnez l’abonnement.
      1. Dans la liste **de listes** des groupes de ressources, sélectionnez le groupe de ressources.
          
          Pour créer une ressource, sélectionnez Créer une **ressource, entrez** le nom de la ressource, **sélectionnez OK** et  sélectionnez l’emplacement requis dans la liste de listes listes des emplacements du nouveau groupe de ressources.

          > [!NOTE]
          > Dans la section ID de l’application Microsoft, créer **un ID d’application Microsoft** est déjà sélectionné. Vous pouvez sélectionner **Utiliser l’inscription d’application** existante, entrer **l’ID** d’application existant et entrer **le mot de passe de l’application existante**.

      1. Sélectionnez **Examiner et créer**.

          <img src="~/assets/images/bots/Azurebotcreate.png" alt="Create resource Azure bot" width="700"/>

      1. Si la validation réussit, sélectionnez **Créer**.

          La mise en service de votre service de bot prend quelques instants.

      1. Sélectionnez **Accéder à la ressource**. Le bot et les ressources associées sont répertoriés dans le groupe de ressources.

          Votre bot Azure a maintenant été créé.

          ![Ressource de bot Azure créée](~/assets/images/bots/Azurebotresource.png)

      **Pour créer une secret client**

      1. Dans **Paramètres**, sélectionnez **Configuration**.

         > [!TIP]
         > Enregistrez **l’ID d’application Microsoft** ou **l’ID client** pour référence ultérieure.

      1. **Sélectionnez MultiTenant sous** **Type de bot**.

           ![Bot Type](~/assets/images/bots/bot-type.png)

      1. En plus de **l’ID de l’application Microsoft**, sélectionnez **Gérer**.

           ![ID d’application Microsoft](~/assets/images/bots/MicrosoftAppID.png)

      1. Dans la section **Secrets client** , sélectionnez **Nouvelle secret client**. La **fenêtre Ajouter une secret client** s’affiche.  

      1. Entrez **description,** puis sélectionnez **Ajouter**.

          <img src="~/assets/images/bots/addclientsecret.png" alt="Add client secret to app" width="500"/>

      1. Dans la **colonne Valeur** , **sélectionnez Copier dans le Presse-papiers** et enregistrez l’ID de la question secrète client pour référence ultérieure.

           ![Valeur de la secret client](~/assets/images/bots/valueclientsecret.png)
         
      **Pour ajouter le Microsoft Teams canal**

      1. Go to **Home**.

          <img src="~/assets/images/bots/homepage.png" alt="Home page" width="600"/>

      1. Ouvrez votre bot, qui est répertorié dans la section **Ressources récentes** .
      1. **Sélectionnez Canaux** dans le volet gauche et **sélectionnez Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.    
            ![Ouvrir des Teams à partir de canaux](~/assets/images/bots/channel-teams.png)    
            ![Sélectionnez Teams](~/assets/images/bots/select-teams.png)    
      1. Sélectionnez **Enregistrer**.
      1. Cochez la case pour accepter les conditions d’utilisation et sélectionnez **Accepter**.</br>
            ![Conditions d’utilisation](~/assets/images/bots/select-terms-of-service.png)

      **Pour ajouter un point de terminaison de messagerie**

      1. Dans **Paramètres** pour le bot Azure que vous avez créé, sélectionnez **Configuration**.
      1. Go to ngrok.
      1. Copiez l’URL HTTPS (https to io) comme illustré dans l’image suivante :

          ![URL HTTPS ngrok](~/assets/images/bots/ngrokURL.png)

      1. Dans **le point de terminaison de messagerie**, utilisez l’URL HTTPS disponible à partir de ngrok et à la fin de l’URL, **ajoutez /api/messages**.

          <img src="~/assets/images/bots/messagingURL.png" alt="Messaging endpoint" width="600"/>

      1. Sélectionnez **Appliquer**.

          Vous avez correctement installé un bot dans Azure Bot Service et vous devez maintenant configurer la connexion au service de bot.
  - title: Configurer l’sso pour votre bot
    durationInMinutes: 5
    content: |
      Pour vous assurer que le bot Service permet à l’utilisateur de se connecter et d’accéder au bot, vous devez configurer l’utilisateur sso pour votre bot. Pour ce faire, effectuez les étapes suivantes :

      * Ajoutez l’URI de redirection à la ressource du bot Azure.
      * Exposer le point de terminaison de l’API pour spécifier l’emplacement à partir de lequel les ressources sont accessibles.
      * Autoriser les applications clientes.
      * Ajoutez les autorisations d’API nécessaires pour les appels en aval.
      * Activer l’octroi implicite.
      * Mettre à jour le manifeste.
      * Configurer la connexion au service bot.

      **Pour ajouter un URI de redirection à la ressource du bot Azure**

      1. Adjacent à **l’ID de l’application Microsoft**, sélectionnez **Gérer**.</br>
          ![Gérer l’ID d’application](~/assets/images/bots/select-manage.png)
      1. Dans le volet gauche de votre ressource bot, sélectionnez **Authentification**.
      1. Dans **configurations de plateforme**, **sélectionnez Ajouter une plateforme**.
      1. Sélectionnez **Web**.

      1. Entrez **les UR de** redirection en tant **https://token.botframework.com/.auth/web/redirect** que, puis **sélectionnez Configurer**.

          <img src="~/assets/images/bots/redirectURI.png" alt="Configure Redirect URI" width="600"/>

          L’URI de redirection est ajouté à la ressource du bot Azure.

          ![URI de redirection ajouté à la ressource bot](~/assets/images/bots/redirectURIadded.png)

      **Pour exposer le point de terminaison de l’API**

      1. Dans le volet gauche, sélectionnez **Exposer une API**.
      1. **Sélectionnez Définir** pour l’URI d’ID d’application.
      1. Utilisez l’URI d’ID d’application **affiché et api://botid-** au début de l’URI.

          <img src="~/assets/images/bots/exposeAPI.png" alt="Expose an API" width="500"/>

      1. Sélectionnez **Enregistrer**. Enregistrez **l’URI de l’ID d’application** pour référence ultérieure.
      1. Sélectionnez **Ajouter une étendue**.
      1. Dans **le nom de l’étendue**, **entrez access_as_user**.
      1. In **Qui can consent?**, switch to **Admins and users**.
      1. Entrez les valeurs suivantes dans les zones :

          | Champ | Valeur |
          | ----- | ----- |
          | Nom complet du consentement de l’administrateur | Teams pouvez accéder au profil de l’utilisateur |
          | Description du consentement de l’administrateur | Permet Teams d’appeler les API web de l’application en tant qu’utilisateur actuel. |
          | Nom complet du consentement de l’utilisateur | Teams pouvez accéder à votre profil utilisateur et effectuer des demandes en votre nom |
          | Description du consentement de l’utilisateur | Activez Teams pour appeler les API de cette application avec les mêmes droits que vous. |

      1. Vérifiez que **State** est défini comme **Enabled**.

          <img src="~/assets/images/bots/addscope.png" alt="Add a scope to app" width="500"/>

      1. Sélectionnez **Ajouter une étendue**. Le nom de l’étendue correspond automatiquement à l’URI de l’ID d’application, **avec /access_as_user** ajouté à la fin.

          ![API exposée et étendue ajoutée](~/assets/images/bots/ExposeAPIandaddscope.png)

      **Pour autoriser les applications clientes**

      Ajoutez les ID suivants en tant **qu’applications clientes** autorisées et cochez également la case pour **les étendues autorisées** :      
      * 1fec8e78-bce4-4aaf-ab1b-5451cc387264 (Teams application mobile ou de bureau)            
      * 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 (application web Teams)</br>     
          ![Ajouter une application cliente à l’application](~/assets/images/bots/addclientapplication1.png)        

      **Pour ajouter les autorisations d’API nécessaires pour les appels en aval**

      1. Sélectionnez **les autorisations d’API** dans le volet gauche.
      1. Ajoutez les autorisations déléguées utilisateur dont votre application a besoin pour les API en aval, par exemple, User.Read.</br>
          ![Autorisations utilisateur d’API](~/assets/images/bots/APIpermissions.png)

      **Pour activer l’octroi implicite**

      1. Sélectionnez **Authentification** dans le volet gauche.
      1. Cochez **les jetons Access** et **les jetons d’ID** .</br>
          ![Cases à cocher d’authentification pour l’application](~/assets/images/bots/authenticationcheckboxes.png)
      1. **Sélectionnez Enregistrer** pour enregistrer les modifications.

      **Pour mettre à jour le manifeste**

      1. **Sélectionnez Manifeste** dans le volet gauche.
      1. Assurez-vous que l’élément de config est définie sur **« accessTokenAcceptedVersion » : 2**. Si ce n’est pas le cas, modifiez sa valeur **sur 2** et sélectionnez **Enregistrer**. (Si vous testez déjà votre bot dans Teams, vous devez signer cette application et vous Teams. Ensuite, connectez-vous à nouveau pour voir cette modification).</br>
          ![Mettre à jour le manifeste](~/assets/images/bots/update-manifest.png)</br>

      **Pour configurer la connexion bot service**

      1. Go to **Configuration pageAdd** >  **OAuth Connection Paramètres**.
      1. **Sélectionnez Ajouter une connexion OAuth Paramètres**.
      1. Dans **Nouveau paramètre de connexion**, entrez les détails suivants :

          | Field | Valeur ou description |
          | ----- | ----- |
          | Nom | Entrez le nom de votre nouveau paramètre de connexion. Vous pouvez utiliser le nom dans les paramètres de votre code de service de bot. |
          | Fournisseur de services | **Sélectionnez Azure Active Directory V2**. |
          | ID client | Enregistré précédemment en tant **qu’ID d’application Microsoft**. |
          | Secret client | Enregistré précédemment sous **la valeur de** l’ID de la secret client. |
          | URL de Exchange jeton | Utilisez **l’URL d’ID d’application** obtenue précédemment lors de l’exposition du point de terminaison de l’API. |
          | ID client | Entrez **commun.** |
          | Étendues | Entrez **User.Read et** ajoutez également toutes les **étendues requises** tout en spécifiant des autorisations pour les API en aval. |

          <img src="~/assets/images/bots/botserviceconnection.png" alt="Bot Service connection" width="300"/>

      1. Sélectionnez **Enregistrer**.
      1. Sélectionnez **Appliquer**.
  - title: Configurer et exécuter votre exemple de bot
    durationInMinutes: 1
    content: |
      Configurez l’exemple de bot pour comprendre comment authentifier le bot de conversation dans Microsoft Teams.

      **Pour configurer et exécuter votre exemple de bot**

      1. Ouvrez Visual Studio.
      1. Dans Visual Studio, **sélectionnez Cloner un référentiel**.
      1. Dans **l’emplacement du référentiel**, entrez **https://github.com/OfficeDev/Microsoft-Teams-Samples.git**. Veillez à noter le **chemin d’accès** où le référentiel est cloné.
      1. **Sélectionnez Fichier > Ouvrir > Project/Solution**.
      1. Go to **Microsoft-Teams-Samples > samples > bot-conversation-sso-quickstart > csharp_dotnetcore** folder.
      1. Ouvrez **le fichier BotSSOCSharp.csproj** .
      1. Ouvrez **le fichier appsettings.json** .
      1. Mettez à **jour la configuration appsettings.json** pour que le bot utilise et `MicrosoftAppId` `MicrosoftAppPassword`. Utilisez le nom de connexion OAuth comme nom **de connexion**.

          > [!NOTE]
          > Vous pouvez obtenir cette `MicrosoftAppId` dernière à partir de la page configuration du bot. Il s’agit `MicrosoftAppPassword` de la valeur de l’ID de secret client que vous avez enregistré précédemment.

          ![JSON Appsettings](~/assets/images/bots/appsettingsjson.png)

      1. Sélectionnez **la touche F5** pour exécuter ce projet.

          <br>

          <details>

          <summary><b>Résolution des problèmes</b></summary>

          Si vous obtenez **l’erreur de package Impossible de trouver** , suivez les étapes suivantes :

          1.  Go to **Tools** >  **NuGet Gestionnaire de package** >  **Gestionnaire de package Paramètres**.
          1.  Dans la **fenêtre Options** qui s’affiche, **sélectionnez NuGet Gestionnaire de package** >  **Sources depackage**.
          1.  Sélectionnez **Ajouter**.
          1.  In **Name**, enter **nuget.org** and in **Source**, enter **https://api.nuget.org/v3/index.json**.
          1.  **Sélectionnez Mettre à** jour et **OK**.
          1.  Reconstruire votre projet.
          <br>

          </details>
  - title: Configurer et exécuter l’application Teams de messagerie
    durationInMinutes: 2
    content: |
      La façon la plus complète de tester votre bot consiste à créer un package d’application et à le télécharger sur Teams. Cette méthode est le seul moyen de tester les fonctionnalités complètes disponibles pour votre bot, dans toutes les étendues. Vous pouvez configurer et exécuter l’application Teams en chargeant **le fichiermanifest.zip'application**.

      **Pour exécuter l’Teams en chargeant le fichier manifest.zip**

      1. Dans Visual Studio, allez dans le **dossier appPackage/**.
      1. Ouvrez **le fichier manifest.json** .
      1. Dans le **fichier manifest.json** , recherchez **{TODO : MicrosoftAppId}** et remplacez-le par votre ID d’application Microsoft.
      1. Dans Windows Explorer, allez dans le dossier d'> **Microsoft-Teams-Samples > bot-conversation-sso-quickstart > csharp_dotnetcore > appPackage**.
      1. Zip the contents of the **appPackage/** folder to create **manifest.zip**.
      1. Go to Teams.
      1. Pour télécharger **manifest.zip**, sélectionnez **Windows Store > gérer vos applications > Télécharger une application personnalisée** et ouvrir **manifest.zip**.
      1. **Sélectionnez Ajouter** pour ajouter le bot de conversation à votre conversation.

          Vous pouvez interagir avec ce bot en lui envoyant un message. Le bot échange un jeton DSO et appelle l’API Graph en votre nom et renvoie les résultats. Il vous maintient en place, sauf si vous envoyez un message à **la connexion**.

      1. Envoyez un message au bot. Le bot de conversation demande des autorisations pour la première fois.

          ![Autorisations pour le bot](~/assets/images/bots/sbsdesktop-mobile-consent-request.png)

      1. **Sélectionnez Continuer** pour accepter les autorisations.

      1. **Sélectionnez Accepter** pour **les autorisations demandées**.

          ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
  - title: Défi complet
    durationInMinutes: 1
    content: |
      Avez-vous eu un projet comme celui-ci ?

      ![Mobile signed in to bot](~/assets/images/bots/sbs-desktop-mobile.png)
  - content: |
      Vous avez terminé le didacticiel pour commencer à utiliser l’sso dans un bot pour Microsoft Teams l’aide de Bot Framework.