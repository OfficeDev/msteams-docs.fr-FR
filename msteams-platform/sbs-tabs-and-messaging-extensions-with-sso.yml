### YamlMime:Tutorial
title: AAD SSO pour les onglets et l’extension de messagerie
metadata:
  title: AAD SSO pour les onglets et l’extension de messagerie
  description: 'Dans ce didacticiel, vous allez apprendre à configurer AAD ssO pour les onglets.'
  audience: Developer
  level: Beginner
  ms.date: 12/07/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/auth-aad-sso.md
  nextTutorialTitle: En savoir plus sur l’authentification sso pour les onglets.
  ms.custom: mvc
  ms.localizationpriority: high
items:
  - durationInMinutes: 1
    content: |
      L Azure Active Directory l’authentification unique (AAD SSO) permet d’authentifier les utilisateurs dans Teams. 

      **Aspects clés du guide pas à pas de l AAD ssO pour les onglets et les extensions de messagerie**

       * Après la première connectez-vous, AAD L’sO permet à l’utilisateur de se connecter automatiquement.
       * Permet à l’utilisateur de se connecter à d’autres appareils sans entrer de nouveau les informations d’identification de connexion.
       * Obtient le jeton de l’utilisateur connecté.   

      Ce guide pas à pas vous aide à créer des onglets et des extensions de messagerie pour activer AAD’authentification sso. Vous verrez le résultat suivant :

        ![Image de félicitations](~/assets/images/Tab-ME-SSO/hello-megan-profile245.png)   
  - title: Conditions préalables
    durationInMinutes: 1
    content: |
      Veillez à installer les outils suivants et à configurer votre environnement de développement :  

      * Microsoft Teams avec un compte (et non un compte invité)
      * [.NET Core SDK](https://dotnet.microsoft.com/download) version 3.1
      * [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/)
      * [ngrok](https://ngrok.com/download) dernière version (uniquement pour le test de la boîte de développement) ou toute solution de tunneling équivalente
      * [Microsoft 365 de développeur ou](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) l’accès Teams un compte avec les autorisations appropriées pour installer une application
  - title: Configurer l’environnement local
    durationInMinutes: 1
    content: |
      Clonez `Microsoft-Teams-Samples` le référentiel dans votre GitHub :  

       1. Ouvrez [Microsoft Teams exemples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
       1. **Sélectionnez Code**.
       1. Dans le menu déroulant, sélectionnez **Ouvrir avec GitHub Bureau**.

          ![Référentiel de clones](~/assets/images/meeting-token-generator/meeting-token-generator-clonerepository.png)

       1. **Sélectionnez Clone**. 
  - title: Créer et inscrire votre bot sur Azure AD web
    durationInMinutes: 5
    content: |
      Les étapes suivantes vous guident vers :

      * Créez une ressource Azure Bot pour inscrire le bot auprès d’Azure Bot Service.
      * Créez une secret client qui permet l’authentification sso du bot.
      * Ajoutez Microsoft Teams canal pour déployer le bot sur un canal Teams’accès.
      * Utilisez ngrok pour créer un tunnel vers les points de terminaison de votre serveur web.
      * Ajoutez le point de terminaison de messagerie au tunnel ngrok que vous avez créé.

      **Pour créer une ressource Azure Bot**

      1. Go to the [Microsoft Azure portal](https://portal.azure.com/).
      1. Sélectionnez **Créer une ressource**.
      1. Dans la zone de recherche, entrez **Azure Bot**.
      1. **Sélectionnez Entrée**.
      1. **Sélectionnez Azure Bot**.

           ![Créer une carte de bot Azure](~/assets/images/bots/createazurebot.png)

      1. Sélectionnez **Créer**.
      1. Entrez le nom de handle de bot requis dans **le handle bot**.
      1. Dans la **liste de** listes des abonnements, sélectionnez **msteams.nonprod.pub.msft.aplt**.
      1. Dans la liste **de listes** des groupes de ressources, sélectionnez votre groupe de ressources existant. Vous pouvez également créer un nouveau groupe de ressources (sélectionnez **Créer un nouvel** > entrez le nom de la ressource **> ok).**

          ![Inscrire un bot](~/assets/images/Tab-ME-SSO/register-bot.png)

      1. Dans la section **ID de l’application Microsoft** , l’option Créer un **ID** d’application Microsoft est sélectionnée par défaut. 

         **Sélectionnez Utiliser l’inscription d’application** existante et entrez l’ID d’application existant et le mot de passe **d’application** existant pour une application existante. **Sélectionnez Créer un ID d’application Microsoft** pour une nouvelle application.

         > [!NOTE]
         > Vous ne pouvez pas créer plusieurs bots avec le même **ID d’application Microsoft**.

      1. Sélectionnez **Examiner et créer**.

         ![Inscrire un bot](~/assets/images/Tab-ME-SSO/register-bot-2.png)

      1. Si la validation réussit, sélectionnez **Créer**.

          La mise en service de votre service de bot prend quelques instants.

      1. Sélectionnez **Accéder à la ressource**. 

          ![Déployer l’application](~/assets/images/Tab-ME-SSO/go-to-resource.png)

          Votre bot Azure est créé.

          ![Déployer l’application](~/assets/images/Tab-ME-SSO/app-overview.png)

      **Pour créer une secret client**

        Effectuez les étapes suivantes si vous avez créé un **ID d’application Microsoft** :

      1. Dans le panneau gauche, sélectionnez **Configuration**. 

         > [!TIP]
         > Enregistrez **l’ID d’application Microsoft** ou **l’ID client** pour référence ultérieure.

      1. **Sélectionnez MultiTenant sous** **Type de bot**.

          ![Bot Type](~/assets/images/Tab-ME-SSO/bot-type.png)

      1. En plus de **l’ID de l’application Microsoft**, sélectionnez **Gérer**.

          ![ID d’application Microsoft](~/assets/images/Tab-ME-SSO/manage.png)

      1. Dans la section **Secrets client** , sélectionnez **Nouvelle secret client**. 

          ![Nouvelle secret client](~/assets/images/meeting-token-generator/meeting-token-generator-newclientsecret.png)

         La **fenêtre Ajouter une secret client** s’affiche.  

      1. Entrez **la description**.

      1. Sélectionnez **Ajouter**.

          ![Ajouter une secret client à l’application](~/assets/images/Tab-ME-SSO/add-client-id.png)

      1. Dans la **colonne Valeur** , **sélectionnez Copier dans le Presse-papiers**.

           ![Valeur de la secret client](~/assets/images/Tab-ME-SSO/client-ids.png)
         
         > [!TIP]
         > Enregistrez la **valeur des secrets client** ou le mot de passe de l’application pour référence ultérieure.

      **Pour ajouter le Microsoft Teams canal**

      1. Sélectionnez **Accueil**.

          ![Page d’accueil](~/assets/images/Tab-ME-SSO/home.png)

      1. Sélectionnez votre bot à partir **des ressources récentes**.

      1. **Sélectionnez Canaux** dans le volet gauche. 

      1. **Sélectionnez Microsoft Teams** <img src="~/assets/images/bots/teamsicon.png" alt="Teams icon" width="20"/>.

      1. Cochez la case pour accepter les **conditions d’utilisation**.

      1. **Sélectionnez Accepter**.

            ![Conditions d’utilisation](~/assets/images/meeting-token-generator/meeting-token-generator-terms.png)

      1. Sélectionnez **Enregistrer**.

            ![Sélectionnez Teams](~/assets/images/meeting-token-generator/meeting-token-generator-config-teams.png)   

      **Pour créer un tunnel pour un serveur web local**

      Utilisez ngrok pour créer un tunnel vers les points de terminaison HTTPS disponibles publiquement de votre serveur web exécutant localement. Exécutez la commande suivante dans ngrok :

       ```bash
       ngrok http -host-header=localhost 3978
       ```

      **Pour ajouter un point de terminaison de messagerie**

      1. À partir de ngrok, copiez l’URL HTTPS (https vers io).

          ![URL HTTPS ngrok](~/assets/images/Tab-ME-SSO/ngrok-image.png)

          > [!NOTE]
          > L’URL HTTPS dans votre ngrok est votre nom de domaine complet.
          > Il `WebAppDomain` s’agit d’un nom de domaine complet qui ne l’inclut `https://` pas.

      1. Dans **Paramètres** pour le bot Azure que vous avez créé, sélectionnez **Configuration**.

      1. Dans **le point de terminaison de messagerie**, utilisez l’URL HTTPS disponible à partir de ngrok et à la fin de l’URL, **ajoutez /api/messages**.

          ![Point de terminaison de messagerie](~/assets/images/Tab-ME-SSO/messaging-endpoint.png)

      1. Sélectionnez **Appliquer**.

          Vous avez correctement installé un bot dans Azure Bot Service.
  - title: Configurer l’sso pour votre onglet
    durationInMinutes: 1
    content: |
      **Pour inscrire votre application via le portail Azure AD web**  

      1. Go to the [Microsoft Azure portal](https://portal.azure.com/).

      1. Sélectionnez **Azure Active Directory**.

      1. Form the left pane, select **App Registrations**.

      1. Sélectionnez votre bot.

      1. **Sélectionnez Exposer une API**.

      1. Sélectionnez **Définir**.

         ![Exposer une API](~/assets/images/Tab-ME-SSO/application-id-set.png)

      1. Définissez **l’URI de l’ID d’application** sous la forme `api://botid-{AppID}`.

         ![Lien Définir](~/assets/images/Tab-ME-SSO/appid-uri1.png)
          
      1. Sélectionnez **Ajouter une étendue**. 

      1. Dans le panneau qui s’affiche, entrez `access_as_user` le nom de **l’étendue**.

      1. **Définissez Qui pouvez consentir à** `Admins and users`.

      1. Pour configurer les invites de consentement de l’administrateur et de l’utilisateur avec les valeurs `access_as_user` appropriées pour l’étendue, fournissez les informations suivantes dans les champs :</br>

         * Entrez le `Teams can access the user’s profile` **nom complet du consentement de l’administrateur**.

         * Entrez la `Allows Teams to call the app’s web APIs as the current user` **description du consentement de l’administrateur**.

         * Entrez le `Teams can access the user profile and make requests on the user’s behalf` **nom complet du consentement de l’utilisateur**.

         * Entrez en `Enable Teams to call this app’s APIs with the same rights as the user` tant **que description du consentement de l’utilisateur**.

      1. Vérifiez que **State** est défini comme **Enabled**.

      1. **Sélectionnez Ajouter une étendue** à enregistrer.

         ![Étendues](~/assets/images/Tab-ME-SSO/add-a-scope.png)

          > [!NOTE]
          > Le **nom de l’étendue** doit correspondre à l’URI **de l’ID** d’application avec `/access_as_user` ajouté à la fin.</br>
             `api://botid-00000000-0000-0000-0000-000000000000/access_as_user`

            ![Étendues](~/assets/images/Tab-ME-SSO/add-a-scope-final1.png) 

      1. Dans la section **Applications clientes autorisées**, identifiez les applications que vous souhaitez autoriser pour l'application Web de votre application. 

      1. Sélectionnez **Ajouter une application cliente**. 

      1. Entrez chacun des ID client suivants et sélectionnez l’étendue autorisée :</br>

           * `1fec8e78-bce4-4aaf-ab1b-5451cc387264`(Teams application mobile ou de bureau)

             ![Ajouter une application cliente](~/assets/images/Tab-ME-SSO/add-client-application.png) 

           * `5e3ce6c0-2b1f-4285-8d4b-75ee78787346`(Teams application web)

             ![Ajouter une application cliente](~/assets/images/Tab-ME-SSO/add-client-application21.png) 
          

         L’image suivante affiche **l’ID client** :

           ![Applications clientes](~/assets/images/Tab-ME-SSO/client-id-2.png) 

      1. Dans le panneau gauche, sélectionnez **Autorisations d’API**. 

         > [!NOTE]
         > Les utilisateurs doivent consentir à ces autorisations uniquement si Azure AD’application est inscrite dans un autre client.

      1. Sélectionnez **Ajouter une autorisation**.

      1. **Sélectionnez Microsoft Graph**.

         ![Microsoft Graph](~/assets/images/Tab-ME-SSO/microsoft-graph.png)

      1. Sélectionnez **Autorisations déléguées**.

         Par défaut, **User.Read** est sélectionné.

         ![Utilisateur](~/assets/images/meeting-token-generator/meeting-token-generator-userpermission.png)

      1. Ajoutez les autorisations suivantes :</br>
          * **email**
          * **offline_access**
          * **OpenId**
          * **profil**


      1. Sélectionnez **Ajouter des autorisations**.

      1. Dans le panneau gauche, sélectionnez **Authentification** pour définir un URI de redirection. 

         > [!NOTE]
         > Si une application n’est pas accordée au consentement de l’administrateur informatique, les utilisateurs doivent donner leur consentement la première fois qu’ils utilisent une application.
                 
           1. Sélectionnez **Ajouter une plateforme**.
           1. Sélectionnez **Web**.

              ![Web](~/assets/images/Tab-ME-SSO/configure-platform1.png)

           1. Entrez **les URL de** redirection sous le nom `https://token.botframework.com/.auth/web/redirect`.

           1. **Activez l’octroi implicite et les flux hybrides** en sélectionnant les case à cocher suivantes :
               * **Jetons d’ID**
               * **Jetons d’accès**

           1. Sélectionnez **Configurer**.

              ![Configurer le web](~/assets/images/Tab-ME-SSO/configure-web.png)

      **Pour mettre à jour le manifeste**

      1. **Sélectionnez Manifeste** dans le volet gauche.

      1. Assurez-vous que l’élément de config est définie sur **« accessTokenAcceptedVersion » : 2**. Si ce n’est pas le cas, modifiez sa valeur **sur 2** et sélectionnez **Enregistrer**. 

         > [!Tip]
         > Si vous testez déjà votre bot dans Teams, vous devez vous dé dé connectez du bot et dédétez-vous de Teams. Connectez-vous à nouveau pour voir cette modification.

         ![Mettre à jour le manifeste](~/assets/images/bots/update-manifest.png)</br>

      **Pour configurer la connexion bot service**

      1. Go to **Configuration pageAdd** >  **OAuth Connection Paramètres**.

      1. **Sélectionnez Ajouter une connexion OAuth Paramètres**.

      1. Dans **Nouveau paramètre de connexion**, entrez les détails suivants :

          | Champ | Valeur ou description |
          | ----- | ----- |
          | **Name** | Entrez le nom de votre nouveau paramètre de connexion. Vous pouvez utiliser le nom dans les paramètres de votre code de service de bot. |
          | **Fournisseur de services** | **Sélectionnez Azure Active Directory V2**. |
          | **ID du client** | Enregistré précédemment en tant **qu’ID d’application Microsoft**. |
          | **Secret client** | Enregistré précédemment sous **la valeur de** l’ID de la secret client. |
          | **URL de Exchange jeton** | Utilisez **l’URI d’ID d’application** obtenu précédemment lors de l’exposition du point de terminaison de l’API. |
          | **ID client** | Entrez **commun.** |
          | **Scopes** | Entrez **User.Read et** ajoutez toutes les **étendues sélectionnées** tout en spécifiant des autorisations pour les API en aval. |

      1. Sélectionnez **Enregistrer**.

          <img src="~/assets/images/Tab-ME-SSO/new-connection-setting.png" alt="Bot Service connection" width="300"/>
  - title: Configurer les paramètres de l’application
    durationInMinutes: 1
    content: |
      1. Accédez **à appsettings.json dans** le référentiel cloné.

          ![Emplacement des paramètres de l’application](~/assets/images/Tab-ME-SSO/app-setting-folder.png)

      1. **Ouvrez appsettings.json** **dans Visual Studio Code** et mettez à jour les informations suivantes :  

           * Définissez `"MicrosoftAppId"` ce dernier sur **l’ID d’application Microsoft de votre bot**.
           * Définissez-la `"MicrosoftAppPassword"` sur la valeur de l’ID de la secret client de votre bot.
           * Définissez `"DOMAIN-NAME"` votre URL ngrok.
           * Définissez `"ConnectionName"` ce paramètre sur le nom du paramètre de connexion OAuth.
           * Définissez `"ClientId"` ce dernier sur **l’ID d’application Microsoft de votre bot**.
           * Définissez-la `"AppSecret"` sur la valeur de l’ID de la secret client de votre bot.
           * Définie `"ApplicationIdURI"` sous la forme `api://584f****.ngrok.io/botid-{AppID}`.

          ![Paramètres de l’application](~/assets/images/Tab-ME-SSO/app-setting1.png)
  - title: Configurer le fichier manifeste
    durationInMinutes: 1
    content: |
      1. Accédez **à manifest.json dans** le référentiel cloné.

          ![Emplacement du fichier manifeste](~/assets/images/Tab-ME-SSO/folder-manifest.png)

      1. **Ouvrez manifest.json** **dans Visual Studio Code** et a apporté les modifications suivantes :

           * Remplacez toutes les occurrences de `[DOMAIN-NAME]` votre nom de domaine ngrok. 
           * Remplacez toutes les occurrences par `[YOUR-MICROSOFT-APP-ID]` **l’ID d’application Microsoft de votre bot**.

               > [!NOTE]
               > Selon le scénario et peut `[YOUR-MICROSOFT-APP-ID]` `[DOMAIN-NAME]` se produire plusieurs fois.

           * Définir `"resource"` comme `api://584f****.ngrok.io/botid-{AppID}`.</br>
          
          ![Image2 du manifeste](~/assets/images/Tab-ME-SSO/vs-manifest.png)
  - title: Créer et exécuter le service
    durationInMinutes: 1
    content: |
      **Pour créer et exécuter le service à l’aide Visual Studio 2019 ou de la ligne de commande**

      # <a name="visual-studio-2019"></a>[Visual Studio 2019](#tab/vs2019)

         1. **Lancez Visual Studio 2019**.
         1. Accédez **à** **FileOpen** >  >  **Project/Solution**.

            ![Ouvrir un fichier](~/assets/images/Tab-ME-SSO/open-project1.png)

         1. **Sélectionnez le fichier App SSO Sample.csproj** à partir du **dossier csharp**.

            ![Project dossier](~/assets/images/Tab-ME-SSO/project-folder1.png)

         1. Vous verrez le résultat suivant :

            ![Fichier de jeton](~/assets/images/Tab-ME-SSO/output1.png)

         1. Appuyez sur **F5** pour exécuter le projet.

         1. **Sélectionnez Oui** si la boîte de dialogue suivante s’affiche :

            ![Certificat d’autorisation](~/assets/images/Tab-ME-SSO/certificate.png)

            Une page web s’ouvre avec un message **Votre bot est prêt !**

            ![Application prête](~/assets/images/Tab-ME-SSO/bot-completion-explorer.png) 

          
      # <a name="command-line"></a>[Ligne de commande](#tab/cli)

      Accédez au **dossier csharp** dans une fenêtre d’invite de commandes et entrez la commande suivante :

      ```bash
      dotnet run
      ```

      ![Dotnet](~/assets/images/Tab-ME-SSO/dotnet-run1.png)
        
  - title: Télécharger’application DSO à Teams
    durationInMinutes: 1
    content: |
      **Pour exécuter Teams’application en chargeant le fichier manifest.zip'application**

      1. Dans votre référentiel cloné, accédez à **csharp >'exemple d’sso de l’application > TeamsAppManifest**.

      1. Créez une .zip avec les fichiers suivants présents dans le **dossier manifeste** : 
         * manifest.json
         * icon-outline.png
         * icon-color.png

         ![Sélectionner un fichier zip](~/assets/images/Tab-ME-SSO/upload-tab-me-sso.png)

      1. Go to **Microsoft Teams**.

      1. Sélectionnez **Store**.
      1. **Sélectionnez Gérer vos applications**.
      1. **Sélectionnez Publier une application**.

         ![Dotnet](~/assets/images/Tab-ME-SSO/publish-an-app.png)

      1. **Sélectionnez Télécharger une application personnalisée**. 

         ![Télécharger application personnalisée](~/assets/images/Tab-ME-SSO/upload-custom-app.png)

      1. **Sélectionnez Ouvrir** pour télécharger le .zip que vous avez créé dans le **dossier manifeste**.

         ![Sélectionner un fichier zip](~/assets/images/Tab-ME-SSO/upload-tab-me-sso-open.png)

      1. Sélectionnez **Ajouter**.

         ![Ajouter l’application](~/assets/images/Tab-ME-SSO/add-sso-app.png)

      1. Envoyez un message au bot. 
      1. Le bot effectue l’sign-on unique et affiche la carte de visite avec l’invite d’options pour afficher le jeton.

         ![Carte de profil](~/assets/images/Tab-ME-SSO/Congratulation-image.png)

      1. **Sélectionnez Oui** pour afficher le jeton ou **Non** pour poursuivre la conversation.
        
         ![Affichage du jeton](~/assets/images/Tab-ME-SSO/token-view1.png)

        1. Si l’authentification par défaut n’est pas effectuée, le bot effectue la méthode d’authentification par défaut pour votre onglet.

            ![Pas d’sso](~/assets/images/Tab-ME-SSO/not-login11.png)

        1. Sélectionnez les ellipses **...** pour ouvrir l’extension de messagerie.

            ![extension de messagerie](~/assets/images/Tab-ME-SSO/message-extension.png)
        
        1. Sélectionnez votre nouvelle application DSO.

            ![Application DSO](~/assets/images/Tab-ME-SSO/recent-app-sso.png)

        1. **Sélectionnez se connectez**.

            ![Se connecter](~/assets/images/Tab-ME-SSO/sign-in-sso1.png)

        1. Entrez vos informations d’identification dans la zone de connexion, puis sélectionnez **Suivant**.

            ![Zone de signature](~/assets/images/Tab-ME-SSO/sign-in-box.png)
        
        1. Sélectionnez **Accepter**.

            ![zone de consentement](~/assets/images/Tab-ME-SSO/concent-box.png)

        1. Ouvrez l’extension de messagerie et sélectionnez votre application.

        1. Sélectionnez votre profil sous zone de recherche. Vous verrez quelque chose comme ceci :

            ![Profil](~/assets/images/Tab-ME-SSO/hello-megan-profile.png)

        1. Envoyer `https://profile.botframework.com` à l’application pour obtenir une carte de visite.
         
            ![Carte de profil](~/assets/images/Tab-ME-SSO/profile-card.png)
  - title: Défi complet
    durationInMinutes: 1
    content: |
      Avez-vous eu un projet comme celui-ci ?

         ![Profil d’utilisateur sso](~/assets/images/Tab-ME-SSO/hello-megan-profile245.png)
  - content: |
      Vous avez terminé le didacticiel pour commencer avec l’ingso pour l’onglet et l’application d’extension de messagerie.