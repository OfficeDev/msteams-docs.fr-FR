### YamlMime:Tutorial
title: Créer des webhooks sortants
metadata:
  title: Créer des webhooks sortants
  description: Dans ce didacticiel, vous allez apprendre à configurer des webhooks sortants pour Teams.
  audience: Developer
  level: Beginner
  ms.date: 14/01/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: webhooks-and-connectors/how-to/add-outgoing-webhook.md
  nextTutorialTitle: En savoir plus sur les webhooks sortants
  ms.custom: mvc
  ms.localizationpriority: High
  ms.openlocfilehash: 1c62f9005336f36ed3c26488003d358118d987cd
  ms.sourcegitcommit: 05285653b2548e0b39e788cd07d414ac87ba3eaf
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 05/04/2022
  ms.locfileid: "65191158"
items:
- durationInMinutes: 1
  content: "Les webhooks aident Microsoft Teams à s’intégrer à des applications externes. Dans Teams, les webhooks sortants agissent en tant que bot et recherchent des messages dans les canaux à l’aide **de @mention**. Les webhooks sortants permettent aux utilisateurs d’envoyer des messages aux services web sans effectuer l’intégralité du processus de création de bots via Microsoft Bot Framework. Les webhooks sortants publient des données de Teams vers n’importe quel service capable d’accepter la charge utile JSON. \n\n**Principales fonctionnalités des webhooks sortants**\n\n* Envoyer des notifications à n’importe quel service web externe.\n* Répondez avec des messages texte enrichis, notamment des cartes et des images. \n* Recevoir des messages dans des canaux publics et non dans l’étendue personnelle ou privée.\n* Envoyez HTTP POST au service web et obtenez une réponse. \n\n > [!NOTE]\n > Les webhooks sortants ne peuvent pas accéder à d’autres API, telles que récupérer la liste ou la liste des canaux d’une équipe.\n\nCe guide pas à pas vous aide à créer des webhooks sortants dans Teams. La sortie suivante s’affiche :\n\n![Prêt](~/assets/images/sbs-outgoing-webhooks/output-result1.png)\n"
- title: Conditions requises
  durationInMinutes: 1
  content: "Veillez à installer les outils suivants et à configurer votre environnement de développement :  \n\n* [Microsoft Teams](https://teams.microsoft.com/) avec un compte valide\n* [Dernière version de Visual Studio](https://visualstudio.microsoft.com/downloads/)\n* [ngrok](https://ngrok.com/download) version la plus récente (uniquement pour le test de devbox) ou toute solution de tunneling équivalente\n\n  > [!NOTE]\n  > Après avoir téléchargé ngrok, inscrivez-vous et installez [authtoken](https://ngrok.com/download).\n"
- title: Configurer un environnement local
  durationInMinutes: 1
  content: "Clonez `Microsoft-Teams-Samples` le référentiel dans votre GitHub local :  \n\n 1. Ouvrez [Microsoft Teams exemples](https://github.com/OfficeDev/Microsoft-Teams-Samples).\n 1. Sélectionnez **Code**.\n 1. Dans le menu déroulant, sélectionnez **Ouvrir avec GitHub Desktop**.\n\n    ![Clone](~/assets/images/sbs-outgoing-webhooks/clone-repository.png)\n\n 1. Sélectionnez **Cloner**. \n"
- title: Créer des webhooks sortants
  durationInMinutes: 5
  content: "1. Sélectionnez l’équipe requise, puis sélectionnez **Gérer l’équipe** dans le menu déroulant (•••).\n\n   ![Gestion](~/assets/images/sbs-outgoing-webhooks/manage-team.png)\n\n1. Choisissez l’onglet **Applications** dans la barre de navigation.\n\n   ![Choose](~/assets/images/sbs-outgoing-webhooks/app-selection.png)\n\n1. Utilisez ngrok pour créer un tunnel vers les points de terminaison HTTPS disponibles publiquement de votre serveur web local. Exécutez la commande suivante dans ngrok :\n\n    ```bash\n    ngrok http --host-header=localhost 3978\n    ```\n\n1. Dans le coin inférieur droit de la fenêtre, sélectionnez **Créer un webhook sortant**.\n\n   ![Sortant](~/assets/images/sbs-outgoing-webhooks/create-outgoing-webhook.png).\n\n1. Entrez les détails suivants :\n \n    * **Nom** : titre du webhook sous l’onglet @mention.\n\n    * **URL de rappel** : URL générée à partir de ngrok qui accepte les charges utiles JSON et reçoit les requêtes POST de Teams. Pour utiliser l’api/l’exemple ou l’api/authenticatedSample, procédez comme suit :\n\n        * Pour l’api/l’exemple, copiez et collez l’URL ngrok et ajoutez-la à /api/sample.\n\n        * Pour l’exemple authentifié, copiez et collez l’URL ngrok et ajoutez-la à /authenticatedSample?id=contoso.\n\n    * **Description** : chaîne détaillée qui s’affiche dans la carte de profil et le tableau de bord de l’application au niveau de l’équipe.\n\n    * **Image de profil (facultatif)** : icône d’application pour votre webhook.\n\n1. Sélectionnez **Créer**. Le webhook sortant est ajouté au canal de l’équipe actuelle.\n\n    ![Créer des webhooks sortants](~/assets/images/sbs-outgoing-webhooks/select.png)\n\n1. Une `Hash-based Message Authentication Code (HMAC)` boîte de dialogue s’affiche. Vous pouvez utiliser le jeton de sécurité dans le fichier **AuthProvider.cs** pour authentifier les appels entre Teams et tous les services externes désignés. \n\n    > [!NOTE]\n    > Le webhook sortant est disponible pour les utilisateurs de l’équipe, uniquement si l’URL est valide et que le serveur et les jetons d’authentification du client sont égaux. Par exemple, une poignée de main HMAC.\n                \n     ![Code](~/assets/images/sbs-outgoing-webhooks/security-token.png)   \n"
- title: Générer et exécuter le service
  durationInMinutes: 1
  content: "1. Lancez la dernière version de Visual Studio.\n\n1. Accédez à **FileOpen** >  >  **Project/Solution**.\n\n    ![Ouvrir le fichier](~/assets/images//sbs-outgoing-webhooks/outgoing-webhooks-VSopenfile.png)\n\n1. Sélectionnez **le fichier WebhookSampleBot.sln** dans le dossier **csharp** .\n\n    ![Fichier de solution](~/assets/images//sbs-outgoing-webhooks/open-project.png)\n\n1. Mettez à jour **« contoso »** sur « M365x712764 » et HMAC dans le fichier **AuthProvider.cs** .  \n\n    ![mettre à jour](~/assets/images//sbs-outgoing-webhooks/update-hmac2.png)\n\n1. Appuyez sur **F5** pour exécuter le projet.\n\n1. Sélectionnez **Oui** si la boîte de dialogue suivante s’affiche :\n\n    ![Certificat d’approbation](~/assets/images//sbs-outgoing-webhooks/outgoing-webhook-certificate.png)\n\n   Une page web affiche les informations de l’hôte local.\n\n    ![Application prête](~/assets/images//sbs-outgoing-webhooks/outgoing-webhooks-ready.png)                  \n"
- title: Interagir avec l’application dans Teams
  durationInMinutes: 1
  content: "1. Sélectionnez **Général** pour démarrer une nouvelle conversation.\n\n1. Sélectionnez **Nouvelle conversation** pour commencer une conversation.\n\n1. **Entrez\\@** le nom du webhook sortant pour l’appeler dans le canal. \n\n   ![message](~/assets/images/sbs-outgoing-webhooks/type-mention.png)\n\n1. Sélectionnez **Envoyer**.\n\n   > [!NOTE]\n   >  Vous pouvez envoyer une carte adaptative, une carte de bannière et des SMS en tant que pièce jointe avec le webhook sortant.\n\n1. La conversation de réunion affiche un nouveau message.\n\n   ![Prêt](~/assets/images/sbs-outgoing-webhooks/output-result.png)\n   \n"
- title: Relever le défi
  durationInMinutes: 1
  content: >
    Tu as trouvé quelque chose comme ça ?

       ![Prêt](~/assets/images/sbs-outgoing-webhooks/output-result1.png)
- content: Vous avez terminé le didacticiel pour commencer à utiliser une application de webhook sortante !
