### YamlMime:Tutorial
title: Envoyer des messages proactifs
metadata:
  title: Envoyer des messages proactifs
  description: Avec ce module d’apprentissage, découvrez comment envoyer des messages proactifs, tels que des messages d’accueil, des messages planifiés et des notifications à partir d’un bot.
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: En savoir plus sur les messages proactifs
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 225df4dc7672fc07d1397eea67900943f4bfe99b
  ms.sourcegitcommit: 5070746e736edb4ae77cd3efcb2ab8bb2e5819a0
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 06/16/2022
  ms.locfileid: "66123327"
items:
- durationInMinutes: 1
  content: "Un message proactif est un message envoyé par un bot qui n’est pas en réponse à une demande d’un utilisateur qui inclut des messages, par exemple :\n - Les messages de bienvenue\n - Notifications\n - Messages planifiés\n \nCe guide pas à pas vous aide à envoyer un message proactif à partir d’un bot. Les sorties suivantes s’affichent :\n\n* Message hello proactif dans la conversation        \n![Hello proactif dans la conversation](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* Message hello proactif en tant que carte adaptative    \n![hello proactif dans la carte adaptative](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: Conditions préalables
  durationInMinutes: 2
  content: "Vérifiez que vous installez les éléments suivants :    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).\n* [ASP.NET et le développement web](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer), ou charge de travail de développement multiplateforme [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) .\n* [ngrok](https://ngrok.com/download) : application multiplateforme qui vous permet d’exposer un serveur de développement local à Internet avec un effort minimal.\n* [Obtenez un locataire de développeur Teams gratuit](https://developer.microsoft.com/microsoft-365/dev-program).\n"
- title: Configurer un environnement local
  durationInMinutes: 3
  content: "1.  Téléchargez [l’exemple de code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (fichier zip) et extrayez les fichiers.\n1.  Accédez aux fichiers extraits et double-cliquez sur **ProactiveBot.csproj**. La solution s’ouvre dans Visual Studio.\n1.  Dans Visual Studio, cliquez avec le bouton droit sur le projet (**ProactiveBot**) et sélectionnez **Générer** pour générer la solution.\n\n    ![Projet Proactivebot](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>Résolution des problèmes</b></summary>\n\n    Si vous obtenez l’erreur **Impossible de trouver le package** , procédez comme suit :\n\n    1.  Accédez à **Outils** >  **NuGet Gestionnaire de package** >  **Gestionnaire de package Paramètres**.\n    1.  Dans la fenêtre **Options** qui s’affiche, sélectionnez **NuGet Gestionnaire de package** >  **Package Sources**.\n    1.  Sélectionnez **Ajouter**.\n    1.  Entrez `nuget.org` le **nom** et `https://api.nuget.org/v3/index.json` les champs **Source** .\n    1.  Sélectionnez **Mettre à jour** et **OK**.\n    1.  Régénérez votre projet.\n    <br>\n\n    </details>\n    \n1. Décompressez pour installer ngrok.\n   * Windows : Double-cliquez `ngrok.zip`.\n   * Linux ou OS X : décompressez ngrok à partir du terminal et exécutez la `unzip /path/to/ngrok.zip` commande.\n1. Exécutez ngrok à partir de la ligne de commande avec les arguments suivants :\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. Copiez l’URL ngrok (comme mis en surbrillance dans l’image) pour obtenir une référence supplémentaire en tant qu’URL de base ngrok dans les étapes suivantes. \n\n    ![URL de base ngrok](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: Créer et installer Teams application
  durationInMinutes: 5
  content: "1. Accédez à Teams > **App Studio** et importez le `AppManifest.zip` fichier disponible dans l’exemple de code téléchargé (fichier zip).\n\n    ![Application d’importation App Studio](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. Sélectionnez **Bots** > **Set up**.\n\n    ![Configuration du bot](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. Dans la fenêtre **Configurer un bot** , entrez **Nom** (par exemple, **démonstration de message proactive**).\n1. Sélectionnez **Personnel** , puis **Créez un bot** pour créer le bot.\n\n    ![Créer un ID de bot](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. Ajoutez **/api/messages** à l’URL de base ngrok (que vous avez copiée) et définissez-la comme **adresse de point de terminaison de bot**. Votre URL se présente comme suit : `https://yourngrokdomain.ngrok.io/api/messages`.\n\n    ![Adresse du point de terminaison du bot](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. Attendez quelques secondes que les modifications prennent effet.     \n\n    > Si cela prend plus de temps, sélectionnez **Tabs** , puis la section **Bots** pour forcer la mise à jour.\n    \n1. Sélectionnez **Générer un nouveau mot de passe** pour générer le nouveau mot de passe d’application et le copier. \n\n    ![Générer un mot de passe d’application](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Accédez à Visual Studio et ouvrez le fichier **appsettings.json**.  Collez le mot de passe comme valeur pour `MicrosoftAppPassword`.    \n1. Accédez à **App Studio** et copiez l’ID d’application. \n\n    ![Générer l’ID d’application](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Accédez à Visual Studio et ouvrez le fichier **appsettings.json**.  Collez l’ID d’application comme valeur pour `MicrosoftAppId`. Vos `appsettings.json` valeurs de paramètre sont les suivantes :    \n\n    ![Valeurs Appsetting](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. Appuyez sur **F5** ou sélectionnez **IIS Express** pour exécuter le code.\n\n    ![Exécuter le code](~/assets/images/proactive-scenario/run-code.png)\n\n    L’exemple de message proactif correspondant s’affiche :  \n\n    ![Exemple de message proactif](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. Accédez à **Tester et distribuer** > **l’installation** pour réinstaller la même application.\n\n    ![Installer l’application](~/assets/images/proactive-scenario/install-app.png)   \n\n1. Sélectionnez l’URL `http://localhost:3978/api/notify` pour obtenir un message hello proactif dans la conversation.\n\n    ![Message proactif envoyé](~/assets/images/proactive-scenario/result.png)\n\n1. Allez à Teams. Vous recevez un message hello proactif du bot lorsque l’installation réussit.          \n\n    ![Hello proactif dans la conversation](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: Ajouter une carte adaptative au message proactif
  durationInMinutes: 10
  content: "1. Dans Visual Studio, arrêtez le processus de débogage.\n\n    ![Arrêter le débogage](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. Cliquez avec le bouton droit **sur Dépendances**, **sélectionnez Gérer NuGet packages**.\n\n    ![Ajouter un package de carte adaptative1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. Dans **NuGet ProactiveBot**, **sélectionnez Parcourir et recherchez** **AdaptiveCards**. \n1. Sélectionnez **Installer**. \n\n    ![Ajouter un package de carte adaptative 2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. Ouvrez le fichier **NotifyController.cs** et remplacez le code existant `BotCallback` par le code suivant pour envoyer le message de carte adaptative :     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. Pointez sur la ligne rouge ondulée et sélectionnez **à l’aide de AdaptiveCards** pour résoudre les erreurs. \n\n    ![Résoudre l’erreur](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. Appuyez sur **F5** pour exécuter le code. \n1. Accédez à Teams et désinstallez votre application. \n    \n    ![Désinstaller l’application](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. Réinstallez la même application pour obtenir l’événement `conversationUpdate` .   \n\n1. Sélectionnez l’URL [api/notify] `(http://localhost:3978/api/notify)` pour obtenir un message hello proactif dans la carte adaptative.     \n"
- title: Relever le défi
  durationInMinutes: 3
  content: >
    Tu as trouvé quelque chose comme ça ? Voici comment s’affiche le message hello proactif dans la carte adaptative :


    ![hello proactif dans la carte adaptative](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    Vous avez terminé le scénario.

    * Vous pouvez envoyer des notifications quotidiennement ou demander régulièrement des commentaires de la part de l’utilisateur.

    * Gérez les limites de limitation pour éviter plusieurs notifications.
