### YamlMime:Tutorial
title: Envoyer des messages proactifs
metadata:
  title: Envoyer des messages proactifs
  description: Dans ce scénario, vous allez apprendre à envoyer des messages proactifs
  audience: Developer
  level: Beginner
  ms.date: 06/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ./bots/how-to/conversations/send-proactive-messages.md
  nextTutorialTitle: En savoir plus sur les messages proactifs
  ms.custom: mvc
  ms.openlocfilehash: f242afca853e2ae5c01f2fa999775a5100ad04d0e0e8c9695b47a1f7f932ad9f
  ms.sourcegitcommit: 3ab1cbec41b9783a7abba1e0870a67831282c3b5
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 08/07/2021
  ms.locfileid: "57704788"
items:
- durationInMinutes: 1
  content: "Un message proactif est un message envoyé par un bot qui ne répond pas à une demande d’un utilisateur. Cela peut inclure des messages, tels que :\n - Les messages de bienvenue\n - Notifications\n - Messages programmés\n \nCe guide pas à pas vous aide à envoyer un message proactif à partir d’un bot. Vous verrez les sorties suivantes :\n\n* Message d’bonjour proactif dans la conversation        \n![Hello proactif dans la conversation](~/assets/images/proactive-scenario/proactive-helo.png)\n\n* Message d’bonjour proactif en tant que carte adaptative    \n![Hello proactif dans la carte adaptative](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png) \n"
- title: Conditions préalables
  durationInMinutes: 2
  content: "Veillez à installer les logiciels suivants :    \n\n* [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/).\n* [ASP.NET développement web,](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.301-windows-x64-installer)ou charge de travail de développement [.NET Core](https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-3.1.410-windows-x64-installer) sur plusieurs plateformes.\n* [ngrok](https://ngrok.com/download): application cross-platform qui vous permet d’exposer un serveur de développement local sur Internet avec un effort minimal.\n* [Obtenez un client Teams développeur gratuit.](https://developer.microsoft.com/en-us/microsoft-365/dev-program)\n"
- title: Configurer l’environnement local
  durationInMinutes: 3
  content: "1.  Téléchargez [l’exemple de code](https://github.com/MicrosoftDocs/msteams-docs/tree/master/msteams-platform/assets/downloads/SendProactiveMessages.zip) (fichier zip) et extrayez les fichiers.\n1.  Go to the extracted files and double-click **ProactiveBot.csproj**. La solution s’ouvre en Visual Studio.\n1.  Dans Visual Studio, cliquez avec le bouton droit sur le projet (**ProactiveBot**), puis sélectionnez **Créer** pour créer la solution.\n\n    ![Projet Proactivebot](~/assets/images/proactive-scenario/proactivebot-project.png)\n\n    <br>\n\n    <details>\n\n    <summary><b>Résolution des problèmes</b></summary>\n\n    Si vous obtenez l’erreur de package Impossible **de trouver,** suivez les étapes suivantes :\n\n    1.  Go to **Tools**  >  **NuGet Gestionnaire de package**  >  **Gestionnaire de package Paramètres**.\n    1.  Dans la **fenêtre Options** qui s’affiche, **sélectionnez NuGet Gestionnaire de package** sources de  >  **package.**\n    1.  Sélectionnez **Ajouter**.\n    1.  Entrez **nuget.org** dans le **nom et** dans les champs **https://api.nuget.org/v3/index.json** **Source.**\n    1.  Sélectionnez **Mettre à** jour et **OK.**\n    1.  Reconstruire votre projet.\n    <br>\n\n    </details>\n    \n1. Dézipez pour installer ngrok.\n   * Windows : double-cliquez sur **ngrok.zip**.\n   * Linux ou OS X : dézipez ngrok du terminal et exécutez la `unzip /path/to/ngrok.zip` commande.\n1. Exécutez ngrok à partir de la ligne de commande avec les arguments suivants :\n\n    `ngrok http 3978 --host-header=localhost`  \n    \n1. Copiez l’URL ngrok (comme le montre l’image) pour une référence supplémentaire en tant qu’URL de base ngrok dans les étapes suivantes. \n\n    ![URL de base ngrok](~/assets/images/proactive-scenario/ngrok-base-url.png)   \n"
- title: Créer et installer Teams application
  durationInMinutes: 5
  content: "1. Go to Teams > **App Studio** and import the **AppManifest.zip** file available in the downloaded sample code (Zip file).\n\n    ![Application d’importation App Studio](~/assets/images/proactive-scenario/app-studio-import-app.png) \n\n1. Select **Bots**  >  **Set up**.\n\n    ![Configurer le bot](~/assets/images/proactive-scenario/bot-setup.png)  \n\n1. Dans la fenêtre Configurer un **bot** qui s’affiche, entrez nom **(par** **exemple,** Démonstration proactive des messages), sélectionnez **Personnel,** puis créez le bot pour créer le bot. \n\n    ![Créer un ID de bot](~/assets/images/proactive-scenario/create-bot-id.png)   \n\n1. Append **/api/messages** to the ngrok base URL (that you had copied) and set it as **Bot endpoint address**. Votre URL se ressemblerait à `https://yourngrokdomain.ngrok.io/api/messages` ceci :\n\n    ![Adresse du point de terminaison du bot](~/assets/images/proactive-scenario/bot-endpoint-address.png)\n\n1. Patientez quelques secondes avant que les modifications prennent effet.     \n\n    > Si cela prend plus de temps, sélectionnez **Onglets,** puis la section **Bots** pour forcer la mise à jour.\n    \n1. Sélectionnez **Générer un nouveau mot de** passe pour générer le nouveau mot de passe de l’application et le copier. \n\n    ![Générer le mot de passe de l’application](~/assets/images/proactive-scenario/generate-app-password.png)\n\n1. Go to Visual Studio and open the **appsettings.json** file.  Collez le mot de passe comme valeur pour `MicrosoftAppPassword` .    \n1. Go to **App Studio**, and copy the App ID. \n\n    ![Générer l’ID de l’application](~/assets/images/proactive-scenario/generate-app-id.png)\n\n1. Go to Visual Studio and open the **appsettings.json** file.  Collez l’ID d’application comme valeur pour `MicrosoftAppId` . Vos `appsettings.json` valeurs de paramètre sont les suivantes :    \n\n    ![Valeurs appsetting](~/assets/images/proactive-scenario/app-setting-values.png)\n\n1. Appuyez **sur F5** ou sélectionnez **IIS express** pour exécuter le code.\n\n    ![Exécuter du code](~/assets/images/proactive-scenario/run-code.png)\n\n    L’exemple de message proactif correspondant s’affiche :  \n\n    ![Exemple de message proactif](~/assets/images/proactive-scenario/proactive-message-sample.png)\n\n1. Go to **Test and distribute**  >  **Install** to install the same app again.\n\n    ![Installer l’application](~/assets/images/proactive-scenario/install-app.png)   \n\n1. Sélectionnez [http://localhost:3978/api/notify](http://localhost:3978/api/notify) l’URL pour obtenir un message de bienvenue proactif dans la conversation.\n\n    ![Message proactif envoyé](~/assets/images/proactive-scenario/result.png)\n\n1. Go to Teams. Vous recevez un message d’bonjour proactif du bot lorsque l’installation réussit.          \n\n    ![Hello proactif dans la conversation](~/assets/images/proactive-scenario/proactive-helo.png)    \n"
- title: Ajouter une carte adaptative au message proactif
  durationInMinutes: 10
  content: "1. Dans Visual Studio, arrêtez le processus de débogage.\n\n    ![Arrêter le débogage](~/assets/images/proactive-scenario/stop-debug.png)\n\n1. Cliquez avec le bouton droit **sur Dépendances,** **sélectionnez Gérer NuGet packages.**\n\n    ![Ajouter un package de carte adaptative1](~/assets/images/proactive-scenario/add-adaptive-card-package1.png)\n\n1. In **NuGet ProactiveBot**, select **Browse** and search for **AdaptiveCards** . Sélectionnez **Installer**. \n\n    ![Ajouter un package de carte adaptative2](~/assets/images/proactive-scenario/add-adaptive-card-package2.png)\n\n1. Ouvrez **le fichier NotifyController.cs** et remplacez le code existant par le code suivant pour envoyer le message de `BotCallback` carte adaptative :     \n    \n   ```csharp\n   private async Task BotCallback(ITurnContext turnContext, CancellationToken cancellationToken)\n    {\n                AdaptiveCard card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 0));\n\n                card.Body.Add(new AdaptiveTextBlock()\n                {\n                    Text = \"Proactive Hello\",\n                    Size = AdaptiveTextSize.ExtraLarge\n                });\n\n                card.Body.Add(new AdaptiveImage()\n                {\n                    Url = new Uri(\"http://adaptivecards.io/content/cats/1.png\")\n                });\n\n                Attachment attachment = new Attachment()\n                {\n                    ContentType = AdaptiveCard.ContentType,\n                    Content = card\n                };\n\n                await turnContext.SendActivityAsync(MessageFactory.Attachment(attachment));\n    }\n   ```\n\n1. Placez le pointeur sur la ligne rouge et choisissez d’utiliser **adaptiveCards** pour résoudre les erreurs. \n\n    ![Résoudre l’erreur](~/assets/images/proactive-scenario/resolve-error.png)  \n\n1. Appuyez sur **F5** pour exécuter le code. \n1. Go to Teams and uninstall your app. \n    \n    ![Désinstaller l’application](~/assets/images/proactive-scenario/uninstall-app.png) \n\n1. Réinstallez la même application pour obtenir `conversationUpdate` l’événement.   \n\n1. Sélectionnez [http://localhost:3978/api/notify](http://localhost:3978/api/notify) l’URL pour obtenir un message hello proactif dans la carte adaptative.     \n"
- title: Défi complet
  durationInMinutes: 3
  content: >
    Avez-vous eu un projet comme celui-ci ? Voici comment s’affiche le message hello proactif dans la carte adaptative :


    ![Hello proactif dans la carte adaptative](~/assets/images/proactive-scenario/proactive-helo-in-adaptive-card.png)
- content: >-
    Vous avez terminé le scénario.

    * Vous pouvez envoyer des notifications quotidiennement ou demander régulièrement des commentaires de la part de l’utilisateur.

    * Gérer les limites de limitation pour éviter plusieurs notifications.
